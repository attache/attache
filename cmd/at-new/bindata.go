// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/index.tpl.tpl
// templates/layout.tpl.tpl
// templates/main.go.tpl

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6e\xac\x30\x0c\x45\xf7\x7c\x85\xc5\x9e\x37\xcc\x36\xc3\xe3\x13\xba\xed\x62\x34\x8b\x90\x18\x70\x1b\x62\x94\x98\x51\x23\x94\x7f\xaf\x86\xd2\x76\x50\xbd\xb1\xa5\x73\x64\xe9\xde\x75\xb5\xd8\x93\x47\x28\x85\xc4\x61\x99\xf3\x2b\x3a\xc3\x13\xae\x2b\x7a\x9b\x73\xf1\x2b\x74\x6c\x53\x99\x73\xd1\x58\xba\x43\x94\xe4\xf0\x7f\x69\x29\xce\x4e\x27\x05\xbd\xc3\x8f\x4b\x01\x4f\x33\x73\x24\x21\xf6\x0a\x74\x17\xd9\x2d\x82\x47\xee\xb0\x17\x05\xf5\x05\x02\x0d\xe3\x76\x1d\xb0\xf0\xbc\xd1\x8e\x45\x78\xfa\x83\x3b\x6d\xde\x87\xc0\x8b\xb7\x95\x61\xc7\x41\xc1\x10\x74\x3a\x3a\x6f\x4b\x14\xea\x53\x65\xd8\x0b\x7a\x51\x60\xd0\x0b\x86\xa3\xa4\x1d\x0d\xbe\x22\xc1\x29\xfe\x08\x65\x5b\x6c\xce\x73\xd2\x47\x40\x05\x35\xd4\xa0\x17\xe1\x87\xf2\xfd\xa1\x19\xcf\xed\x5e\x1a\x08\xc3\xf5\xfa\xef\x45\x4f\x78\xbb\x35\xa7\xf1\xfc\x65\x35\x27\x4b\xf7\xb6\xd8\xd7\xde\xec\x67\x00\x00\x00\xff\xff\x49\xa0\x6f\x4a\x7a\x01\x00\x00")

func templatesIndexTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplTpl,
		"templates/index.tpl.tpl",
	)
}

func templatesIndexTplTpl() (*asset, error) {
	bytes, err := templatesIndexTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.tpl", size: 378, mode: os.FileMode(420), modTime: time.Unix(1529466334, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x6a, 0xd5, 0x7d, 0x9e, 0x37, 0x1c, 0xbc, 0x7d, 0x53, 0x0, 0x77, 0x32, 0x44, 0x0, 0x4f, 0xe8, 0x9a, 0x19, 0xbe, 0x6c, 0x51, 0x3c, 0x60, 0xb1, 0xb5, 0xef, 0x7a, 0x28, 0x2a, 0x2e, 0x2a}}
	return a, nil
}

var _templatesLayoutTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x0a\x0a\x36\x19\xa9\x89\x29\x10\x26\x98\x5b\x92\x59\x92\x93\x6a\x57\x5d\x9d\x94\x93\x9f\x9c\xad\xa0\x04\xe6\x2a\x29\xe8\xd5\xd6\x46\x47\xeb\xf9\x25\xe6\xa6\xc6\xc6\x56\x57\xa7\xe6\xa5\xd4\xd6\xda\xe8\x43\x94\xc2\xb5\xc2\xf5\x14\x97\x54\xe6\xa4\x16\x83\x35\x41\xd5\x62\x51\x93\x5c\x94\x59\x50\x82\xa9\xc8\x46\x1f\xe1\x1e\x9b\xa4\xfc\x94\x4a\x2c\xe6\x83\x84\xc1\x1a\x91\xa4\x90\x4d\x80\x68\xb3\xd1\x07\x7b\x12\x10\x00\x00\xff\xff\xd6\xc2\xdf\x26\xfb\x00\x00\x00")

func templatesLayoutTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutTplTpl,
		"templates/layout.tpl.tpl",
	)
}

func templatesLayoutTplTpl() (*asset, error) {
	bytes, err := templatesLayoutTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.tpl.tpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1529466337, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x66, 0xb7, 0xff, 0xed, 0xfe, 0xac, 0x1e, 0x7f, 0xdc, 0xb9, 0xe0, 0xea, 0x59, 0xaf, 0xd3, 0xf2, 0x4a, 0x4, 0xc2, 0x4f, 0x1f, 0x17, 0xaa, 0xcf, 0x3e, 0x90, 0xd, 0xa, 0x55, 0x13, 0xe0, 0x26}}
	return a, nil
}

var _templatesMainGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcf\x8e\xda\x30\x10\xc6\xef\x7e\x8a\x69\x0e\x95\x13\x21\xe7\x8e\xc4\x05\x28\x15\x97\x22\x51\xd4\x1e\xaa\x6a\x65\xcc\x10\xbc\x38\x76\x76\x32\x59\xc2\x46\x79\xf7\x55\xfe\x80\x56\x02\x9f\xec\x99\x6f\x7e\xdf\x8c\xa7\xd0\xe6\xac\x33\x84\x5c\x5b\x2f\x84\xcd\x8b\x40\x0c\x52\x00\x00\x44\x1e\x39\x3d\x31\x17\xd1\xf0\x74\x21\x8b\xc4\x70\xcd\x2c\x9f\xaa\xbd\x32\x21\x4f\x73\x63\x82\x73\xaf\x94\x6a\x66\x6d\x4e\x18\x89\x58\x08\xbe\x16\x08\x0b\xae\xa1\x64\xaa\x0c\x43\xd3\x97\x8d\x0a\xb5\xc4\xa3\xae\x1c\x2f\xe7\xcf\xa2\x7f\x2c\x5e\xca\x67\x89\x5d\x38\xa3\x7f\x96\x58\x59\x87\xbf\x91\xde\x91\x44\x2b\xc4\xb1\xf2\x06\xa4\x81\x64\xc1\x75\x0c\x6b\x6f\x59\x5e\xa0\x9b\x42\x6d\xb1\x2c\x82\x2f\xf1\x2f\x59\x46\x9a\x00\x41\x32\xc6\xdf\x2a\x2c\x39\x1e\xbb\x4c\x13\xd8\x6d\x96\x9b\x29\x58\x6f\xd9\x6a\x67\x3f\x10\x4c\xf0\x8c\x35\x43\x92\x3e\x5a\xfc\xfc\xb1\x7b\x59\xfb\x03\xd6\xf2\x01\x28\xff\xfd\xdf\x5f\x19\x27\x80\x44\x81\x6e\x06\x84\x5c\x91\x07\xa3\xfa\x51\x65\xac\xb6\xe8\x0f\x48\x32\xb2\x1d\x25\x9a\x80\xb7\x2e\xbe\xfb\x74\x8b\x91\xb7\xd2\xa6\x51\xbf\x74\x8e\x6d\xdb\x23\x61\x3a\xbb\xff\xc5\x3c\x04\x2e\x99\x74\x21\xbf\x2f\xb8\x6e\xda\xb8\xd7\xdb\x63\xaf\xfb\x36\xeb\x98\x23\xa3\x3b\x2e\x64\x6a\xa5\x59\x3b\xe7\x25\x12\x0d\xe2\x76\x58\xee\xd7\xdc\xdd\x4f\x6d\x2b\x2f\xe3\xae\xab\xcf\x00\x00\x00\xff\xff\x11\x57\xa3\xc2\x31\x02\x00\x00")

func templatesMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGoTpl,
		"templates/main.go.tpl",
	)
}

func templatesMainGoTpl() (*asset, error) {
	bytes, err := templatesMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go.tpl", size: 561, mode: os.FileMode(420), modTime: time.Unix(1529465418, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x73, 0x90, 0x47, 0x65, 0x18, 0xfb, 0x73, 0xbc, 0x94, 0x67, 0xa7, 0x86, 0x2c, 0x45, 0x9c, 0xb9, 0x5e, 0xd4, 0x69, 0x6e, 0x36, 0x9b, 0x95, 0xd9, 0x51, 0x0, 0x99, 0xc9, 0xd7, 0xe3, 0xba}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.tpl": templatesIndexTplTpl,

	"templates/layout.tpl.tpl": templatesLayoutTplTpl,

	"templates/main.go.tpl": templatesMainGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.tpl":  &bintree{templatesIndexTplTpl, map[string]*bintree{}},
		"layout.tpl.tpl": &bintree{templatesLayoutTplTpl, map[string]*bintree{}},
		"main.go.tpl":    &bintree{templatesMainGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
