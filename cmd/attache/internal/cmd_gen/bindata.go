// Code generated by go-bindata.
// sources:
// templates/model.tpl
// templates/routes.json.tpl
// templates/routes.tpl
// templates/view_create.tpl
// templates/view_list.tpl
// templates/view_update.tpl
// DO NOT EDIT!

package cmd_gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesModelTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x5f\x6b\xdb\x30\x14\xc5\x9f\xad\x4f\x71\x67\x18\xd8\x23\x55\xdf\x3b\xfc\x30\x56\x06\x21\x23\x0f\x5d\xf7\x34\x06\x55\xac\xeb\x54\x4c\x96\x1d\xe9\x7a\xc5\x5c\xf4\xdd\x87\xff\xd4\x4b\x46\x3b\xca\x60\xe9\x53\x82\x74\x8e\xce\xe1\x77\xdc\xaa\xf2\x87\xda\x23\xd4\x8d\x46\x1b\x84\x30\x75\xdb\x78\x82\x4c\x24\xa9\x56\xa4\x76\x2a\xe0\x65\x38\xd8\x54\x24\xe9\xde\xd0\x7d\xb7\x93\x65\x53\x5f\x2a\x22\x55\xde\xe3\xe3\x6f\x2a\x72\x21\xa8\x6f\x11\x98\xe5\x56\xd5\x18\x23\x04\xf2\x5d\x49\xc0\xc0\xec\x95\xdb\x23\xc8\x4f\x06\xad\x0e\x31\x32\xcb\x2f\xe3\xe5\x78\x10\xe3\x60\xba\xed\xdb\xc1\x74\xa7\x77\x57\x29\xb3\xfc\xd8\xd8\xae\x76\x31\xa6\x77\xef\x99\xd1\x0d\xa2\x28\x44\xd5\xb9\x12\xb6\xf8\xb0\x84\x64\x39\xcc\x0d\xe4\x0d\x96\x8d\xd7\xc0\xe0\x91\x3a\xef\xc0\xe1\x43\xb6\xe8\xf2\xc5\x9d\xd5\xf0\xee\xe8\xf8\x56\xed\x2c\x66\xf9\x50\xd6\xb8\xfd\x6f\x37\x73\xeb\x8d\xa3\x0a\xd2\xb7\x87\x14\xe4\x28\x3b\xea\xf0\xc7\x2b\x1b\xec\xb3\x1c\xb2\x72\x2c\x1d\xe0\xdb\xf7\xe9\xb9\x15\xfc\x54\xb6\xc3\xe1\xc0\x38\x42\x5f\xa9\x12\x39\xe6\xc0\x22\x79\x94\x16\x8b\x98\x45\x92\x30\x5f\xc0\x09\x2b\xb8\x88\x51\x24\xc3\x85\xa9\x40\x6e\xb0\x1f\xe0\xc1\x49\xb5\x89\x14\xc4\xb8\x9a\x41\xcd\xef\xa0\xd3\x93\x3b\x8a\x64\xae\x51\x9c\x16\x79\x69\x62\x2d\x99\xe1\x78\xb1\xbf\x87\x4d\x04\xc5\x33\xa8\xd6\x2e\xa0\xa7\xff\x4a\x8b\x19\x4c\x05\xae\x21\x90\xdb\x66\xca\x83\x73\x71\x7b\x3a\x7b\x20\x78\xfa\xc9\xbf\x88\xdf\xb4\xc1\x35\x56\xaa\xb3\xb4\xc1\x7e\x94\x3c\x05\xf5\x43\x45\xe8\x67\xb2\x1e\x43\x67\x09\xc2\xc1\xca\x9b\xf1\xef\x48\xd0\xe8\x15\xa0\xf7\x70\x55\xc0\x24\x90\x9f\x55\xa0\xc9\xb2\xd6\x59\x2e\x12\x53\x8d\x82\x37\x05\x38\x63\x07\x4b\xd2\x2a\x67\xca\x0c\xbd\xcf\xc7\x5e\xb5\x5c\x5f\x43\x01\x46\x8b\x28\xe6\xce\xf1\x99\x91\xbf\xb6\x5a\x11\x9e\x6f\xe4\x29\xef\x75\x46\x5e\xb2\xff\x69\xe4\x5f\x01\x00\x00\xff\xff\x85\x99\x30\x4a\x7e\x05\x00\x00")

func templatesModelTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelTpl,
		"templates/model.tpl",
	)
}

func templatesModelTpl() (*asset, error) {
	bytes, err := templatesModelTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.tpl", size: 1406, mode: os.FileMode(420), modTime: time.Unix(1539008413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRoutesJsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x51\x6f\xd3\x30\x10\xc7\x9f\xed\x4f\x61\xf2\x80\x6c\x34\xb9\x13\xda\x13\xa8\x0f\x6c\x6d\x07\x68\x74\xa8\xed\xe0\x11\x5d\xe3\x6b\x6b\x70\xec\xec\xe2\x50\xaa\x28\xdf\x1d\xa5\xed\x0a\xac\x15\xa5\x50\x18\x4f\x89\x73\xb9\xcb\xdd\xef\xff\xbf\xe4\x90\x7e\x82\x29\x8a\x0c\xac\xe7\xdc\x66\x79\xa0\x28\x24\x67\xc9\x24\x8b\x09\x67\x89\xc7\xd8\x9a\xc5\x98\x37\xf7\x36\xb4\x6c\x28\xa3\x75\xcd\xc1\x40\x84\x31\x14\xd8\x2a\x6e\x97\x67\xf4\x69\x30\xd6\x4f\x5b\x1f\x8b\xe0\x13\xce\x59\x32\xb5\x71\x56\x8e\x75\x1a\xb2\x16\xc4\x08\xe9\x0c\xef\xae\x09\x57\x9c\x4f\x4a\x9f\x0a\x99\x8a\x27\x55\xa5\x2f\x82\x8f\xf8\x25\x8e\x16\x39\xd6\xb5\x12\x97\xdd\xd1\x87\xaa\xd2\xc3\x34\xe4\x78\x01\x19\xba\xba\xae\x2a\xfd\x26\x18\x74\xba\x0f\x19\xd6\xf5\x95\x2d\xa2\x54\xa2\xe2\x6c\x2e\x9e\xb5\x45\xaa\x07\x58\xe4\xc1\x17\xf8\x9e\x6c\x44\x92\x8a\x33\x70\xee\x44\x20\xd1\x2a\xde\x39\x97\x4a\xbf\x70\x4e\x7a\x9c\xcb\xac\xa9\x54\xe8\x7b\x35\x95\xe2\xcc\x4e\x96\x29\x8f\xda\xc2\x5b\xd7\x94\x67\xeb\x96\x75\x97\x28\x50\x0f\x22\x38\x89\x44\x8a\xb3\x9a\x6f\x62\x03\xf4\x06\xe9\xf5\xf0\xba\x2f\xe7\x27\x02\x9c\x53\xbc\xfe\xc3\x01\xf7\x0c\x47\x77\x81\xdb\x12\x1b\x12\x9c\x59\xd3\x3c\x22\xdd\x0b\x94\xbd\x03\x57\xa2\x4c\xac\x49\x14\x67\x9f\x81\x44\x04\x9a\x62\x14\xbb\xe7\xde\x4c\xfd\x0d\xd4\x25\x46\xf9\x78\x95\x74\x22\xac\x51\xcf\xef\x53\x59\x67\xb4\xdb\xe2\x3b\x3e\x03\x4c\x03\x99\x7e\x88\xbd\x50\x7a\xb3\x7c\xef\x47\x7c\xf2\xec\xf4\x4c\x71\xd6\xa0\xfb\x0d\xae\xab\x7e\xf6\xa1\x7d\x7b\x3d\xdc\xc7\xb6\x8f\xf3\x83\xf1\x8e\x83\x59\x6c\xec\xb4\xda\x02\x3d\x40\x30\x8d\xa5\x48\x9f\x07\xb3\x38\xd8\x3d\x07\x09\xd3\x6c\x95\xbe\xf1\x19\x50\x31\x03\x27\x57\xed\xac\x25\xda\x96\xe7\x67\x9f\xdd\x12\xfb\x95\x2f\x90\x36\x7a\x1f\x56\x6c\xae\x97\xd0\x5e\x22\x18\x24\xf9\xf4\xf4\xf4\x08\xf2\x3c\xac\xf5\x7b\xd6\x9b\x87\xf4\xfe\x5f\x30\xda\xf1\x5d\xc4\x76\x80\xbb\xc9\x0d\x44\xfc\x47\x36\xea\x74\xaf\xba\xa3\xee\x7f\x6d\xa4\xe3\xfd\x43\x77\xd0\x61\x8c\x11\xc6\x92\xfc\x2f\x38\x6a\xab\xb3\x0e\x3a\x3c\xa6\x52\x5f\x03\x00\x00\xff\xff\xf1\x77\xd4\x7c\x44\x08\x00\x00")

func templatesRoutesJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRoutesJsonTpl,
		"templates/routes.json.tpl",
	)
}

func templatesRoutesJsonTpl() (*asset, error) {
	bytes, err := templatesRoutesJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/routes.json.tpl", size: 2116, mode: os.FileMode(420), modTime: time.Unix(1539008413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRoutesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\x5f\x6b\xdb\x30\x14\xc5\x9f\xad\x4f\xa1\x19\x36\xe4\x91\x29\x65\xf4\x69\x23\x8c\xad\x49\xda\xb1\xb6\x0b\x4d\xd6\x3d\x0e\x55\xba\x49\x44\x65\xd9\xbd\xbe\x6e\x56\x8c\xbe\xfb\xb0\xf3\xaf\xff\xe8\x9a\x36\x0c\xca\x9e\x6c\x84\xce\xbd\x57\xe7\x77\xa4\x5c\xe9\x73\x35\x01\x9e\x2a\xeb\x19\xb3\x69\x9e\x21\x71\xc1\xa2\x78\x9c\x52\xcc\xa2\xd8\x03\xb5\xa7\x44\x79\xfd\x6f\x14\xa9\x33\x55\x40\xbb\xb8\x70\x31\x63\x51\x3c\xb1\x34\x2d\xcf\xa4\xce\xd2\xb6\x22\x52\x7a\x0a\xcb\x6f\xcc\x12\xc6\xc6\xa5\xd7\x5c\x68\xfe\xb6\xaa\xe4\x5e\xe6\x09\x7e\xd3\xe8\x2a\x87\x10\x12\xbe\xdf\x1b\xfd\xaa\x2a\x39\xd4\x59\x0e\x7b\x2a\x05\x17\x42\x55\xc9\xa3\xcc\x80\x93\xc7\x2a\x85\x10\x8e\x61\x26\x12\x5e\xb1\xa8\xaa\xb8\x1d\xf3\xf9\xd6\xa1\x57\xe7\xc0\xdf\x85\xc0\xa2\x45\x23\x79\x02\xde\x00\x1e\x8c\x8e\x0e\x85\x6e\xf1\x78\x59\xb4\xd9\x19\x82\x5c\x55\x1d\xa9\x33\x57\x2f\x68\x04\x45\x10\x27\x4d\x61\x70\xc5\x5f\xcb\x3d\x24\xf7\x86\x87\xc0\xc2\x33\x8f\x7a\x68\x0b\x9a\x9f\x55\x39\xd7\xe2\x80\xc8\x3f\x74\xb8\x96\xdd\x2f\x22\x91\x9f\x9d\x13\x1e\x66\x22\xad\x05\x85\xbc\x25\x4d\x12\x16\xd9\x71\x23\x79\xd5\xe1\xde\xba\xba\xca\xea\x30\x3d\xc4\x0c\xfb\x8a\x94\x13\x80\x98\xb0\x28\xb0\x48\xcb\x21\xd0\xa9\x85\x59\x57\x91\x12\xca\xb9\x64\xeb\x16\x3b\x5b\xd0\x93\x0d\xbe\x2e\xde\x8e\xbd\x73\x6b\x17\x9e\x9e\xc0\x45\x09\xb5\xdd\x2c\xb2\xa6\x5e\x42\xd9\xcf\x30\x3d\x55\xae\x04\x11\x5b\x53\xb7\xbe\x54\xc8\x49\xe1\x04\x88\xdf\xef\xfa\xca\xf3\x35\xa6\x7d\x20\xf1\x66\x2e\x6a\x71\x6b\x92\x8f\xb7\x99\x2c\x14\x9d\x0e\xbf\x46\xe7\x04\x74\x86\xe6\x38\xa3\x7e\x56\x7a\xd3\xec\xbb\x09\x4f\xec\xee\xec\x26\x2c\xaa\xc1\x6d\x40\x75\x3e\xc7\xf6\xc1\x96\xb9\x79\xce\xdd\xb9\x29\x7f\x0c\xdc\xc1\xf7\xe1\xa3\xdf\x89\x7b\x00\xaf\x20\xa1\x1c\x28\x2c\xa0\x26\x2d\xee\xa2\x79\xc8\xd8\x8d\xb2\xb0\x2c\x54\xf7\xe9\x82\xce\x0c\xac\x33\x31\xcf\xd9\x66\xcd\xef\xa4\xec\xab\x2f\x00\x57\x41\xdb\xac\xd8\x9a\x92\xb1\x08\x9a\x06\x6a\x02\x62\x9c\x92\x1c\xe6\x68\x3d\x8d\xc5\x8a\xff\x40\xd1\x34\x84\xf6\x6d\x7e\x9f\xac\xe9\xbc\xbe\x8c\x5b\x0b\x3f\xd6\x46\x7c\x83\xab\x21\x61\xa9\xa9\x6f\xc1\x99\xe6\x51\x7a\x36\xd6\xff\xe1\xd2\xfe\xc3\xe0\xfc\x68\xae\xde\x8b\x0f\x4e\xb7\x77\xd8\x1b\xf5\x1e\x15\x9d\xd9\x32\x3a\x45\x9e\xf9\x02\x7e\xa2\x25\xc0\x3a\x41\x2f\x26\x53\x33\xd9\x0c\x7d\x00\xca\x00\x8a\xf7\x3b\x3b\x75\xa6\x22\x04\x2a\xd1\x6f\x94\xae\xc5\x64\x5d\x70\xf0\xd4\x0c\xdc\x33\x4b\xf8\x13\x00\x00\xff\xff\x7c\xca\xed\x92\x3b\x0a\x00\x00")

func templatesRoutesTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRoutesTpl,
		"templates/routes.tpl",
	)
}

func templatesRoutesTpl() (*asset, error) {
	bytes, err := templatesRoutesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/routes.tpl", size: 2619, mode: os.FileMode(420), modTime: time.Unix(1539008413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesView_createTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\x4d\xcb\xdb\x30\x0c\x3e\xb7\xbf\x42\x88\x5d\x93\xdc\x47\xd2\xcb\x60\xb0\xc3\xca\xe0\xdd\xcd\x98\xe1\xc4\x4a\x6b\x70\xe4\xe0\x28\xed\x4a\xc9\x7f\x1f\x49\x9d\xb6\xd9\x7b\x32\x7e\x24\x3d\x1f\x96\x95\xca\xe0\xcb\xd0\x84\x9e\x7e\x19\x39\xc3\xd7\x0a\xf2\x8f\xe7\x2d\xd3\x7a\x3f\x37\x5c\x9d\x9c\x21\xff\x19\x2c\xf9\x05\xbb\xdf\x2d\xb5\x8e\x09\x50\x9c\x78\xc2\x69\x3a\xd2\x15\x94\xca\x8f\xa6\x23\xad\xef\x77\x62\x3b\x4d\x6f\x6d\x75\xb0\x37\x9c\xa6\x7d\x69\xdd\x05\x1a\x6f\x86\xa1\xc2\x26\xb0\x18\xc7\x14\xf1\xb0\xdf\x6d\x0a\x26\xda\x19\xfb\x04\x66\x0b\xcd\x5c\xd9\x95\x6d\x88\x1d\xb0\xe9\xa8\x42\xa6\xeb\x1f\xa5\xf2\xdf\xa6\xf6\xa4\x35\x42\x47\x72\x0e\xb6\xc2\x3e\x0c\x82\x60\x1a\x71\x81\x2b\x54\xea\x15\x53\xeb\xe2\x35\x50\x30\x5d\x1f\xa4\xbb\xb2\x75\xe4\xed\x40\xf2\xb8\xee\x4a\x4f\x27\x62\x7b\xd8\xa4\x2b\x8b\x84\x3e\x7a\x94\x8a\x86\x4f\x04\xf9\xf7\x65\x56\xeb\x15\xce\xc0\xb5\xc0\x41\x20\x3f\x86\x1f\x3c\x50\x94\xb5\xf6\x9e\x6b\xce\x91\x9d\x62\x18\xfb\xe4\x61\x56\x35\x35\x79\x68\x43\x9c\x5d\xe7\x1f\x12\xc7\x46\x16\x76\xad\xf1\xf0\x3f\x52\x16\x4b\xfb\x73\xd8\x71\x3f\x0a\xc8\xad\xa7\x0a\x85\xfe\x0a\xa6\x57\xfa\xc4\xb4\x71\x30\x2f\x23\x06\x8f\xc5\x9a\xbc\xb0\xee\x72\x78\x45\x21\xb6\xcb\xe6\x13\x40\x6c\x9f\x61\xde\x05\x87\xb1\xee\x9c\x20\x5c\x8c\x1f\xa9\xc2\x6f\x91\x8c\xd0\x53\xa9\x16\x86\x5a\x38\xeb\xa3\xeb\x4c\xbc\xad\x62\x65\xb1\x79\xf6\xb2\x98\x1d\x2d\xfb\x4f\x26\xd2\x99\x8e\xf5\x77\x25\x17\xff\x02\x00\x00\xff\xff\xf5\x89\x17\x15\xc1\x02\x00\x00")

func templatesView_createTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesView_createTpl,
		"templates/view_create.tpl",
	)
}

func templatesView_createTpl() (*asset, error) {
	bytes, err := templatesView_createTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view_create.tpl", size: 705, mode: os.FileMode(420), modTime: time.Unix(1539008370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesView_listTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x31\x6b\xf3\x30\x10\x9d\x93\x5f\x21\x4c\x56\x5b\x43\xb6\x0f\xd9\xdf\x52\xba\xb4\x0d\x85\x94\x2e\x42\x83\x62\x5d\x2a\x81\x6b\x17\xf9\x9a\x10\x84\xfe\x7b\x91\x64\x3b\x4e\x93\x42\xe9\x62\x9d\xee\xdd\x9d\xde\x7b\x3e\xce\x73\xb2\xea\xeb\xee\x03\x9e\x25\x6a\xf2\xaf\x24\xc5\x76\xba\xe5\x42\x2c\x43\xc1\xd1\xa0\x26\xc5\x53\xa7\xa0\x89\x39\xe7\x14\xec\x4d\x0b\x24\x43\x83\x0d\x64\xde\x73\x5e\x6c\xe4\x3b\x08\x41\x1e\x4d\x8f\xce\x41\xab\xbc\x9f\xd5\xed\x3a\x75\xca\x62\x26\xcd\x7a\x35\x70\xbc\x93\x28\xbd\x5f\x32\x65\x0e\xa4\x6e\x64\xdf\x97\x59\xdd\xb5\x28\x4d\x0b\x36\xab\x96\x8b\x0b\x40\x5a\x15\x72\x57\xc9\x3c\x4e\x0e\xc8\x82\xe9\x75\x75\xc9\x83\x51\xbd\x4e\x10\xca\x5d\x03\x63\x5f\xba\xc4\x6f\xbe\xeb\xac\x02\x0b\x69\x78\x28\xd4\x20\x55\x8a\x17\x0c\xed\x10\x05\x13\xac\x6c\xdf\x80\x14\xf7\x06\x1a\xd5\x0b\x91\x80\x88\x98\x3d\x69\x3b\x24\xc5\xa6\xdb\x42\x03\x35\x4e\x20\x43\x1d\x18\x6d\xd1\x7e\xd6\x18\x1b\x85\x60\x14\x75\x35\x6b\x86\x56\x45\x4f\xe7\x89\xf1\xca\xe8\xc8\x20\x74\x4d\xc4\x18\x06\xd1\x29\x76\x6e\xe0\xe5\xfd\x2d\xd2\xab\xa4\x35\xfc\xd6\x97\x10\xcd\x1f\xfa\x93\xa0\xd1\x9b\xa9\xb0\x78\x80\x53\x10\xc0\x24\xd1\x16\xf6\x65\xc6\xf9\x79\x9f\x84\xa0\x9c\x27\x0e\x42\xfc\x37\xaa\x74\xae\xf8\x6e\x88\xf7\x59\x75\x65\x44\x10\x76\xa3\xf2\xa7\xb7\xa9\xbc\x31\x82\xd1\x33\xdb\xdf\x3b\x3d\xee\xee\x90\x9d\x9c\x66\x34\xca\x88\x3b\x48\x95\x39\x84\x05\x4d\xe7\x70\x9c\x97\x3e\x9d\x9c\xc7\xf9\x5f\x01\x00\x00\xff\xff\x84\xc7\xb0\xd9\x61\x03\x00\x00")

func templatesView_listTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesView_listTpl,
		"templates/view_list.tpl",
	)
}

func templatesView_listTpl() (*asset, error) {
	bytes, err := templatesView_listTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view_list.tpl", size: 865, mode: os.FileMode(420), modTime: time.Unix(1539008370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesView_updateTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x8b\xdb\x30\x10\x85\xcf\xde\x5f\x31\x88\x5e\x63\xdf\x8b\x9d\x42\x69\x7b\x29\x5d\x0a\xdb\xf6\x22\x44\x19\x5b\xe3\x44\x54\x96\x8c\x3c\xce\x36\x18\xff\xf7\x22\x5b\x49\x9c\x0d\xf4\x24\xf4\x34\xf3\xa4\xef\x8d\x2d\xe5\x0e\xde\x0d\x8d\xef\xe9\x3b\xf2\x11\xde\x57\x90\xbf\x5c\x77\x3b\xa5\x9e\x62\xc1\xab\xe1\x23\xe4\xdf\xbc\x26\xbb\x68\xd3\xa4\xa9\x35\x8e\x40\xb0\x61\x4b\x62\x9e\x3f\x6b\xc3\x20\x65\xfe\x8c\x1d\x29\x35\x4d\xe4\xf4\x3c\x6f\xea\x6a\xaf\xcf\x62\x51\x56\xaf\x5f\x86\x5e\x3f\x21\xe3\x3c\x3f\x95\xda\x9c\xa0\xb1\x38\x0c\x95\x68\xbc\x63\x34\x8e\x82\xd8\x3f\x65\x77\x07\x18\x74\xd4\x1e\xc4\xdd\xe2\x1c\x4f\xb2\xb2\xf5\xa1\x03\x87\x1d\x55\x82\xb4\xe1\xdf\x52\xe6\x3f\xb0\xb6\xa4\x94\x80\x8e\xf8\xe8\x75\x25\x7a\x3f\xb0\x00\x6c\xd8\x78\x57\x09\x29\x6f\xec\x4a\x15\xb7\x86\x0f\x46\x57\xd3\x94\x4b\x99\x7f\xa5\xf3\x0b\x87\xb1\xe1\x2f\x86\xac\x56\x6a\x9e\xd7\xdb\xb2\xb2\x8d\xc2\x40\xbc\x6e\xb3\xd2\xd2\x81\x9c\xde\xdf\x47\x51\x16\x49\x5e\x8b\xa4\x0c\xe8\x0e\x04\xf9\xe2\x36\x28\x95\x7a\x37\x54\x91\x62\x77\x08\x7e\xec\xd3\x45\xd1\x1a\x6b\xb2\xd0\xfa\x10\x9f\x9c\xdf\xbd\x47\xec\xdf\x2a\x65\xb1\x94\x5f\x9b\x8d\xeb\x47\x06\x3e\xf7\x54\x09\xa6\xbf\x2c\x52\x46\x0f\x4e\xa9\x21\xcb\x4e\x68\x47\xaa\xc4\x1a\xc0\x5b\x7a\xb8\x96\x49\x69\x5a\xf0\x01\xf2\x67\xff\xb3\xd7\xc8\x04\x31\x2d\xa5\x02\xa1\xf6\xce\x9e\x2b\xc1\x61\x24\x21\x25\x39\x7d\x21\xcd\xb2\x6c\xcb\x19\x07\x1e\xbc\x15\xc5\x25\xc4\x42\x9b\xd3\x35\xab\x4d\x5f\x89\x70\x0c\xd4\xfe\x67\x64\x85\x35\x71\xb4\xc9\xbd\x66\x07\x35\xbb\x9d\xa6\x16\x47\xcb\x62\xff\x11\x9b\x3f\x65\x81\x97\x7b\xb6\xa1\x0c\x63\xdd\x19\x16\x90\xb0\x57\x96\x07\xa7\x3e\x98\x0e\xc3\xf9\xf2\xd4\xb2\xb8\x9b\x7f\x59\x44\x9e\xe5\x0b\x4d\x08\x69\x4d\xcb\xed\x97\x58\xd7\x04\xf7\x2f\x00\x00\xff\xff\xbe\xf6\xd7\x65\x7f\x03\x00\x00")

func templatesView_updateTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesView_updateTpl,
		"templates/view_update.tpl",
	)
}

func templatesView_updateTpl() (*asset, error) {
	bytes, err := templatesView_updateTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view_update.tpl", size: 895, mode: os.FileMode(420), modTime: time.Unix(1539008370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/model.tpl": templatesModelTpl,
	"templates/routes.json.tpl": templatesRoutesJsonTpl,
	"templates/routes.tpl": templatesRoutesTpl,
	"templates/view_create.tpl": templatesView_createTpl,
	"templates/view_list.tpl": templatesView_listTpl,
	"templates/view_update.tpl": templatesView_updateTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"model.tpl": &bintree{templatesModelTpl, map[string]*bintree{}},
		"routes.json.tpl": &bintree{templatesRoutesJsonTpl, map[string]*bintree{}},
		"routes.tpl": &bintree{templatesRoutesTpl, map[string]*bintree{}},
		"view_create.tpl": &bintree{templatesView_createTpl, map[string]*bintree{}},
		"view_list.tpl": &bintree{templatesView_listTpl, map[string]*bintree{}},
		"view_update.tpl": &bintree{templatesView_updateTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

