// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/model.tpl
// templates/routes.json.tpl
// templates/routes.tpl
// templates/view_create.tpl
// templates/view_list.tpl
// templates/view_update.tpl

package cmd_gen

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesModelTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x41\x6b\xdc\x30\x14\x84\xcf\xd6\xaf\x78\x35\x14\xec\xb2\xd1\xde\x53\x7c\x28\x0d\x85\x65\xcb\x1e\xd2\xf4\x54\x0a\xd1\x4a\xcf\x1b\xb5\xb2\xec\x95\xe4\x06\xf3\xd0\x7f\x2f\xb6\x5c\x77\xb7\x24\x25\x14\x9a\xdc\x8c\x34\xa3\x19\xbe\x71\x27\xe4\x77\x71\x40\x68\x5a\x85\xc6\x33\xa6\x9b\xae\x75\x01\x0a\x96\xe5\x4a\x04\xb1\x17\x1e\xd7\xfe\x68\x72\x96\xe5\x07\x1d\xee\xfa\x3d\x97\x6d\xb3\x6e\xa4\x6c\x8d\xf9\xe6\xd6\x22\x04\x21\xef\x30\x67\x25\x63\x61\xe8\x10\x88\xf8\x4e\x34\x18\x23\xf8\xe0\x7a\x19\x80\x80\xc8\x09\x7b\x40\xe0\x1f\x34\x1a\xe5\x63\x24\xe2\x9f\xa6\xcb\xe9\x20\xc6\xd1\x74\x33\x74\xa3\xe9\x56\xed\x2f\x73\x22\xfe\xbe\x35\x7d\x63\x63\xcc\x6f\xdf\x12\xa1\x1d\x45\x91\xb1\xba\xb7\x12\x76\x78\xbf\x84\x14\x25\xcc\x0d\xf8\x35\xca\xd6\x29\x20\x70\x18\x7a\x67\xc1\xe2\x7d\xb1\xe8\xca\xc5\x5d\x34\xf0\xe6\xe4\xf8\x46\xec\x0d\x16\xe5\x58\x56\xdb\xc3\x6f\x37\x51\xe7\xb4\x0d\x35\xe4\xaf\x8f\x39\xf0\x49\x76\xd2\xe1\x8f\x57\xb6\x38\x14\x25\x14\x72\x2a\xed\xe1\xcb\xd7\xf4\xdc\x0a\x7e\x08\xd3\xe3\x78\xa0\x6d\x40\x57\x0b\x89\x14\x4b\x20\x96\xfd\x92\x56\x8b\x98\x58\x96\x11\x5d\xc0\x19\x2b\xb8\x88\x91\x65\xe3\x85\xae\x81\x6f\x71\x18\xe1\xc1\x59\xb5\x44\x0a\x62\x5c\xcd\xa0\xe6\x77\xd0\xaa\xe4\x8e\x2c\x9b\x6b\x54\xe7\x45\x9e\x9a\xd8\x70\x22\x38\x5d\xec\xef\x61\x89\x20\x7b\x04\xd5\xc6\x7a\x74\xe1\xbf\xd2\x22\x02\x5d\x83\x6d\x03\xf0\x5d\x9b\xf2\xe0\xb9\xb8\x3d\x9c\x3d\x12\x3c\xff\xe5\x9f\xc4\x2f\x6d\x70\x85\xb5\xe8\x4d\xd8\xe2\x30\x49\x1e\x82\xfa\xae\x0e\xe8\x66\xb2\x0e\x7d\x6f\x02\xf8\xa3\xe1\xd7\xd3\xe7\x44\x50\xab\x15\xa0\x73\x70\x59\x41\x12\xf0\x8f\xc2\x87\x64\xd9\xa8\xa2\x64\x99\xae\x27\xc1\xab\x0a\xac\x36\xa3\x25\xeb\x84\xd5\xb2\x40\xe7\xca\xa9\x57\xc3\x37\x57\x50\x81\x56\x2c\xb2\xb9\x73\x7c\x64\xe4\xcf\x9d\x12\x01\x9f\x6f\xe4\x94\xf7\x32\x23\x2f\xd9\xff\x34\xf2\xcf\x00\x00\x00\xff\xff\xfe\x35\xfd\xbf\x7f\x05\x00\x00")

func templatesModelTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelTpl,
		"templates/model.tpl",
	)
}

func templatesModelTpl() (*asset, error) {
	bytes, err := templatesModelTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.tpl", size: 1407, mode: os.FileMode(420), modTime: time.Unix(1538383245, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0xe1, 0x43, 0xe8, 0xed, 0xbb, 0xc, 0xe2, 0x4b, 0xcd, 0xde, 0x93, 0xde, 0x92, 0x3b, 0xe7, 0xb3, 0x45, 0x30, 0x3f, 0x2d, 0x22, 0x9a, 0xa2, 0xbc, 0x5, 0x66, 0xb6, 0x4f, 0xc9, 0x76, 0xc7}}
	return a, nil
}

var _templatesRoutesJsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x51\x93\xd2\x30\x10\xc7\x9f\x93\x4f\x11\xfb\xe0\x24\x0e\x93\x32\xce\x3d\xe9\xf0\xe0\x1d\x70\xea\x9c\x9c\x03\x9c\x3e\x3a\x21\x59\x20\x67\x9a\xf4\xb6\xa9\xc8\x74\xfa\xdd\x9d\x02\xa2\x1e\x8c\x88\xa2\xe7\x5b\xd3\xed\x6e\x77\x7f\xff\xff\x26\x57\xfa\xa3\x9a\x01\xcb\x94\xf5\x94\xda\x2c\x0f\x18\x19\xa7\x24\x99\x66\x31\xa1\x24\xf1\x10\xd3\x79\x8c\x79\xf3\x6c\x43\x6a\x43\x19\xad\x6b\x0e\x46\x45\x35\x51\x05\xa4\xc5\xdd\xea\x0c\x5e\x07\x63\xfd\x2c\xbd\x2d\x82\x4f\x28\x25\xc9\xcc\xc6\x79\x39\x91\x3a\x64\x69\xa6\x75\x70\xee\x16\x53\x15\xa3\xd2\x73\x48\xa8\xa0\x74\x5a\x7a\xcd\xb8\x66\x4f\xaa\x4a\x5e\x04\x1f\xe1\x73\x1c\x2f\x73\xa8\x6b\xc1\x2e\x7b\xe3\x0f\x55\x25\x47\x3a\xe4\x70\xa1\x32\x70\x75\x5d\x55\xf2\x4d\x30\xe0\xe4\x40\x65\x50\xd7\x57\xb6\x88\x5c\xb0\x8a\x92\x05\x7b\xd6\x61\x5a\x0e\xa1\xc8\x83\x2f\xe0\x3d\xda\x08\xc8\x05\x25\xca\xb9\x16\x03\xc4\x75\xbc\x7b\xce\x85\x7c\xe1\x1c\xf7\xb0\xe0\x59\x53\xa9\x90\xf7\x6a\x0a\x41\x89\x9d\xae\x52\x1e\x75\x98\xb7\xae\x29\x4f\x36\x2d\xcb\x1e\x62\xc0\xbe\x8a\xca\x71\x40\x14\x94\xd4\x74\x1b\x1b\x82\x37\x80\xaf\x47\xd7\x03\xbe\x68\x31\xe5\x9c\xa0\xf5\x1f\x0e\x78\x60\x38\xfc\x1a\xb8\x2b\xa1\x21\x41\x89\x35\xcd\x2b\x94\xfd\x80\xd9\x3b\xe5\x4a\xe0\x89\x35\x89\xa0\xe4\x93\x42\x16\x15\xce\x20\xb2\xfd\x73\x6f\xa7\xfe\x06\xea\x12\x22\x7f\xbc\x4e\x6a\x31\x6b\xc4\xf3\xfb\x54\x36\x19\x9d\x0e\xfb\x8e\xcf\x10\x74\x40\x33\x08\xb1\x1f\x4a\x6f\x56\xdf\xfd\x88\x8f\x9f\xb5\xcf\x04\x25\x0d\xba\xdf\xe0\xba\xee\xe7\x10\xda\xb7\xd7\xa3\x43\x6c\x07\xb0\x38\x1a\xef\x24\x98\xe5\xd6\x4e\xeb\x35\x90\x43\x50\xa6\xb1\x14\xca\xf3\x60\x96\x47\xbb\xe7\x28\x61\x9a\xb5\x92\x37\x3e\x53\x58\xcc\x95\xe3\xeb\x76\x36\x12\xed\xca\xf3\xb3\xdf\xee\x88\xfd\xca\x17\x80\x5b\xbd\x8f\x2b\xb6\x90\x2b\x68\x2f\x41\x19\x40\xfe\xb4\xdd\x3e\x81\x3c\x0f\x6b\xfd\xbe\xf5\xe6\x21\xbd\xff\x17\x8c\x76\x7a\x17\x91\x3d\xe0\x6e\x72\xa3\x22\xfc\x23\x1b\x75\x7b\x57\xbd\x71\xef\xbf\x36\xd2\xe9\xee\xd0\x3d\x74\x08\x21\x08\xb1\x44\xff\x0b\x8e\xda\xe9\xac\x0b\x0e\x4e\xa9\xd4\x97\x00\x00\x00\xff\xff\xbe\x55\x2e\xb6\x45\x08\x00\x00")

func templatesRoutesJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRoutesJsonTpl,
		"templates/routes.json.tpl",
	)
}

func templatesRoutesJsonTpl() (*asset, error) {
	bytes, err := templatesRoutesJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/routes.json.tpl", size: 2117, mode: os.FileMode(420), modTime: time.Unix(1538383245, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0xb8, 0x87, 0xb9, 0xfb, 0xe, 0x96, 0xed, 0x26, 0xd4, 0x96, 0xc5, 0xe5, 0xc4, 0x1c, 0xf2, 0x73, 0x1c, 0x2a, 0x66, 0x61, 0xd4, 0x6b, 0x1e, 0x7d, 0xf9, 0x76, 0x9a, 0xab, 0x80, 0x97, 0x1c}}
	return a, nil
}

var _templatesRoutesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\xdf\x4f\xdb\x3e\x14\xc5\x9f\xe3\xbf\xc2\xdf\x48\xdf\xc9\x99\x3a\x17\x4d\x3c\x6d\xaa\xa6\x8d\xb6\x30\x0d\x58\x45\x3b\xf6\x38\x19\xfb\xb6\xf5\x70\xec\x70\x73\x43\x87\x22\xff\xef\x53\xda\xd2\xf2\x4b\x8c\x02\x9a\x84\xf6\x16\x45\x3e\xc7\xd7\xe7\x73\xec\x42\xe9\x53\x35\x01\x9e\x2b\xeb\x19\xb3\x79\x11\x90\xb8\x60\x49\x3a\xce\x29\x65\x49\xea\x81\xda\x53\xa2\xa2\xf9\x36\x8a\xd4\x89\x2a\xa1\x5d\x9e\xb9\x94\xb1\x24\x9d\x58\x9a\x56\x27\x52\x87\xbc\x9d\x6b\x1d\x9c\xfb\x89\x6d\x45\xa4\xf4\x14\x52\x96\x31\x36\xae\xbc\xe6\x42\xf3\xd7\x75\x2d\x77\x82\x27\xf8\x45\xa3\x8b\x02\x62\xcc\xf8\x6e\x6f\xf4\xa3\xae\xe5\x50\x87\x02\x76\x54\x0e\x2e\xc6\xba\x96\x07\xc1\x80\x93\x87\x2a\x87\x18\x0f\x61\x26\x32\x5e\xb3\xa4\xae\xb9\x1d\xf3\xc5\xd2\xa1\x57\xa7\xc0\xdf\xc4\xc8\x92\xe5\x46\xf2\x08\xbc\x01\xdc\x1b\x1d\xec\x0b\xdd\xe2\xe9\xa5\xe9\x7c\x65\x8c\x72\xe5\x3a\x52\x27\xae\xf9\xa1\x11\x14\x41\x9a\xcd\x8d\xc1\x95\x7f\xb4\xbb\x4f\xee\x0d\x8f\x91\xc5\x27\x1e\x75\xdf\x96\xb4\x38\xab\x72\xae\xc5\x01\x91\xbf\xeb\x70\x2d\xbb\x9f\x44\x26\x3f\x3a\x27\x3c\xcc\x44\xde\x08\x4a\x79\x43\x9a\x65\x2c\xb1\xe3\xb9\xe4\xbf\x0e\xf7\xd6\x35\x2e\xab\xc3\xf4\x10\x03\xf6\x15\x29\x27\x00\x31\x63\x49\x64\x89\x96\x43\xa0\x63\x0b\xb3\xae\x22\x25\x94\x73\xd9\xb3\x47\xec\x6c\x49\x8f\x0e\xf8\xaa\xf8\x79\xe2\x5d\x44\xbb\xcc\xf4\x08\xce\x2a\x68\xe2\x66\x89\x35\xcd\x2f\x94\xfd\x80\xf9\xb1\x72\x15\x88\xd4\x9a\x66\xeb\x73\x85\x9c\x14\x4e\x80\xf8\xdd\xa9\xaf\x32\x5f\x63\xda\x05\x12\xaf\x16\xa2\x16\xb7\x26\x7b\x7f\x93\xc9\x52\xd1\xe9\xf0\x2b\x74\x8e\x40\x07\x34\x87\x81\xfa\xa1\xf2\x66\xbe\xee\x3a\x3c\xb1\xbd\xb5\x9d\xb1\xa4\x01\xb7\x01\xd5\xc5\x1c\xcf\x0f\xb6\x2a\xcc\x53\xee\xce\x75\xf9\x43\xe0\x0e\xbe\x0e\x1f\xfc\x4e\xdc\x01\x78\x05\x09\xe5\x40\x61\x09\x0d\x69\x71\x1b\xcd\x7d\xc1\x6e\xd4\x85\x4b\xa3\x66\x9f\x2e\xe8\x60\x60\xdd\x89\x45\xcf\x36\xdb\xfc\x56\xcb\x3e\xfb\x12\x70\x55\xb4\xcd\xcc\xd6\x94\x8c\x45\xd0\x34\x50\x13\x10\xe3\x9c\xe4\xb0\x40\xeb\x69\x2c\x56\xfc\x07\x8a\xa6\x31\xb6\x6f\xf2\xfb\x60\x4d\xe7\xff\xf3\xb4\xb5\xcc\x63\x1d\xc4\x17\xb8\x18\x12\x56\x9a\xfa\x16\x9c\x99\x3f\x4a\x4f\xc6\xfa\x2f\x5c\xda\xbf\x58\x9c\x6f\xf3\xab\xf7\xe2\x8b\xd3\xed\xed\xf7\x46\xbd\x07\x55\x67\x76\x59\x9d\xb2\x08\xbe\x84\xef\x68\x09\xb0\x69\xd0\x8b\xe9\xd4\x4c\xce\x87\xde\x03\x65\x00\xc5\xdb\xad\xad\xa6\x53\x09\x02\x55\xe8\x37\x6a\xd7\x72\xb2\x2e\x38\x78\x6c\x07\xee\x98\x25\xfe\x0e\x00\x00\xff\xff\xab\x7d\x7c\xd2\x3c\x0a\x00\x00")

func templatesRoutesTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRoutesTpl,
		"templates/routes.tpl",
	)
}

func templatesRoutesTpl() (*asset, error) {
	bytes, err := templatesRoutesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/routes.tpl", size: 2620, mode: os.FileMode(420), modTime: time.Unix(1538383245, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0x83, 0x43, 0xcf, 0x8d, 0x12, 0xeb, 0xed, 0x1a, 0x96, 0xbe, 0x9b, 0x46, 0x5c, 0x6e, 0xef, 0x91, 0x35, 0xe8, 0x50, 0xef, 0xf6, 0x82, 0xf3, 0x1d, 0x22, 0xa9, 0x7e, 0x59, 0x65, 0x99, 0x41}}
	return a, nil
}

var _templatesView_createTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\x4d\xcb\xdb\x30\x0c\x3e\xb7\xbf\x42\x88\x5d\x93\xdc\x47\xd2\xcb\x60\xb0\xc3\xca\xe0\xdd\xcd\x98\xe1\xc4\x4a\x6b\x70\xe4\xe0\x28\xed\x4a\xc9\x7f\x1f\x49\x9d\xb6\xd9\x7b\x32\x7e\x24\x3d\x1f\x96\x95\xca\xe0\xcb\xd0\x84\x9e\x7e\x19\x39\xc3\xd7\x0a\xf2\x8f\xe7\x2d\xd3\x7a\x3f\x37\x5c\x9d\x9c\x21\xff\x19\x2c\xf9\x05\xbb\xdf\x2d\xb5\x8e\x09\x50\x9c\x78\xc2\x69\x3a\xd2\x15\x94\xca\x8f\xa6\x23\xad\xef\x77\x62\x3b\x4d\x6f\x6d\x75\xb0\x37\x9c\xa6\x7d\x69\xdd\x05\x1a\x6f\x86\xa1\xc2\x26\xb0\x18\xc7\x14\xf1\xb0\xdf\x6d\x0a\x26\xda\x19\xfb\x04\x66\x0b\xcd\x5c\xd9\x95\x6d\x88\x1d\xb0\xe9\xa8\x42\xa6\xeb\x1f\xa5\xf2\xdf\xa6\xf6\xa4\x35\x42\x47\x72\x0e\xb6\xc2\x3e\x0c\x82\x60\x1a\x71\x81\x2b\x54\xea\x15\x53\xeb\xe2\x35\x50\x30\x5d\x1f\xa4\xbb\xb2\x75\xe4\xed\x40\xf2\xb8\xee\x4a\x4f\x27\x62\x7b\xd8\xa4\x2b\x8b\x84\x3e\x7a\x94\x8a\x86\x4f\x04\xf9\xf7\x65\x56\xeb\x15\xce\xc0\xb5\xc0\x41\x20\x3f\x86\x1f\x3c\x50\x94\xb5\xf6\x9e\x6b\xce\x91\x9d\x62\x18\xfb\xe4\x61\x56\x35\x35\x79\x68\x43\x9c\x5d\xe7\x1f\x12\xc7\x46\x16\x76\xad\xf1\xf0\x3f\x52\x16\x4b\xfb\x73\xd8\x71\x3f\x0a\xc8\xad\xa7\x0a\x85\xfe\x0a\xa6\x57\xfa\xc4\xb4\x71\x30\x2f\x23\x06\x8f\xc5\x9a\xbc\xb0\xee\x72\x78\x45\x21\xb6\xcb\xe6\x13\x40\x6c\x9f\x61\xde\x05\x87\xb1\xee\x9c\x20\x5c\x8c\x1f\xa9\xc2\x6f\x91\x8c\xd0\x53\xa9\x16\x86\x5a\x38\xeb\xa3\xeb\x4c\xbc\xad\x62\x65\xb1\x79\xf6\xb2\x98\x1d\x2d\xfb\x4f\x26\xd2\x99\x8e\xf5\x77\x25\x17\xff\x02\x00\x00\xff\xff\xf5\x89\x17\x15\xc1\x02\x00\x00")

func templatesView_createTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesView_createTpl,
		"templates/view_create.tpl",
	)
}

func templatesView_createTpl() (*asset, error) {
	bytes, err := templatesView_createTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view_create.tpl", size: 705, mode: os.FileMode(420), modTime: time.Unix(1536008791, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x9e, 0x1d, 0x29, 0x8f, 0xee, 0xb9, 0x16, 0xfb, 0x5c, 0x7c, 0x7b, 0xa4, 0xca, 0x95, 0x45, 0xc0, 0x10, 0xd8, 0xb6, 0x4e, 0xe0, 0xd3, 0x17, 0x59, 0x47, 0x66, 0x10, 0xd8, 0x1f, 0xfc, 0x11}}
	return a, nil
}

var _templatesView_listTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x31\x6b\xf3\x30\x10\x9d\x93\x5f\x21\x4c\x56\x5b\x43\xb6\x0f\xd9\xdf\x52\xba\xb4\x0d\x85\x94\x2e\x42\x83\x62\x5d\x2a\x81\x6b\x17\xf9\x9a\x10\x84\xfe\x7b\x91\x64\x3b\x4e\x93\x42\xe9\x62\x9d\xee\xdd\x9d\xde\x7b\x3e\xce\x73\xb2\xea\xeb\xee\x03\x9e\x25\x6a\xf2\xaf\x24\xc5\x76\xba\xe5\x42\x2c\x43\xc1\xd1\xa0\x26\xc5\x53\xa7\xa0\x89\x39\xe7\x14\xec\x4d\x0b\x24\x43\x83\x0d\x64\xde\x73\x5e\x6c\xe4\x3b\x08\x41\x1e\x4d\x8f\xce\x41\xab\xbc\x9f\xd5\xed\x3a\x75\xca\x62\x26\xcd\x7a\x35\x70\xbc\x93\x28\xbd\x5f\x32\x65\x0e\xa4\x6e\x64\xdf\x97\x59\xdd\xb5\x28\x4d\x0b\x36\xab\x96\x8b\x0b\x40\x5a\x15\x72\x57\xc9\x3c\x4e\x0e\xc8\x82\xe9\x75\x75\xc9\x83\x51\xbd\x4e\x10\xca\x5d\x03\x63\x5f\xba\xc4\x6f\xbe\xeb\xac\x02\x0b\x69\x78\x28\xd4\x20\x55\x8a\x17\x0c\xed\x10\x05\x13\xac\x6c\xdf\x80\x14\xf7\x06\x1a\xd5\x0b\x91\x80\x88\x98\x3d\x69\x3b\x24\xc5\xa6\xdb\x42\x03\x35\x4e\x20\x43\x1d\x18\x6d\xd1\x7e\xd6\x18\x1b\x85\x60\x14\x75\x35\x6b\x86\x56\x45\x4f\xe7\x89\xf1\xca\xe8\xc8\x20\x74\x4d\xc4\x18\x06\xd1\x29\x76\x6e\xe0\xe5\xfd\x2d\xd2\xab\xa4\x35\xfc\xd6\x97\x10\xcd\x1f\xfa\x93\xa0\xd1\x9b\xa9\xb0\x78\x80\x53\x10\xc0\x24\xd1\x16\xf6\x65\xc6\xf9\x79\x9f\x84\xa0\x9c\x27\x0e\x42\xfc\x37\xaa\x74\xae\xf8\x6e\x88\xf7\x59\x75\x65\x44\x10\x76\xa3\xf2\xa7\xb7\xa9\xbc\x31\x82\xd1\x33\xdb\xdf\x3b\x3d\xee\xee\x90\x9d\x9c\x66\x34\xca\x88\x3b\x48\x95\x39\x84\x05\x4d\xe7\x70\x9c\x97\x3e\x9d\x9c\xc7\xf9\x5f\x01\x00\x00\xff\xff\x84\xc7\xb0\xd9\x61\x03\x00\x00")

func templatesView_listTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesView_listTpl,
		"templates/view_list.tpl",
	)
}

func templatesView_listTpl() (*asset, error) {
	bytes, err := templatesView_listTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view_list.tpl", size: 865, mode: os.FileMode(420), modTime: time.Unix(1536004472, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x46, 0xdb, 0xc4, 0x3a, 0xf7, 0x26, 0xed, 0xa7, 0x96, 0x9d, 0x9, 0x38, 0xcb, 0x8f, 0x47, 0x89, 0x40, 0xdc, 0xfe, 0xb0, 0x79, 0xb3, 0x3e, 0x2, 0x52, 0xf3, 0x9, 0x9f, 0x2, 0xce, 0x3d, 0xfc}}
	return a, nil
}

var _templatesView_updateTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x8b\xdb\x30\x10\x85\xcf\xde\x5f\x31\x88\x5e\x63\xdf\x8b\x9d\x42\x69\x7b\x29\x5d\x0a\xdb\xf6\x22\x44\x19\x5b\xe3\x44\x54\x96\x8c\x3c\xce\x36\x18\xff\xf7\x22\x5b\x49\x9c\x0d\xf4\x24\xf4\x34\xf3\xa4\xef\x8d\x2d\xe5\x0e\xde\x0d\x8d\xef\xe9\x3b\xf2\x11\xde\x57\x90\xbf\x5c\x77\x3b\xa5\x9e\x62\xc1\xab\xe1\x23\xe4\xdf\xbc\x26\xbb\x68\xd3\xa4\xa9\x35\x8e\x40\xb0\x61\x4b\x62\x9e\x3f\x6b\xc3\x20\x65\xfe\x8c\x1d\x29\x35\x4d\xe4\xf4\x3c\x6f\xea\x6a\xaf\xcf\x62\x51\x56\xaf\x5f\x86\x5e\x3f\x21\xe3\x3c\x3f\x95\xda\x9c\xa0\xb1\x38\x0c\x95\x68\xbc\x63\x34\x8e\x82\xd8\x3f\x65\x77\x07\x18\x74\xd4\x1e\xc4\xdd\xe2\x1c\x4f\xb2\xb2\xf5\xa1\x03\x87\x1d\x55\x82\xb4\xe1\xdf\x52\xe6\x3f\xb0\xb6\xa4\x94\x80\x8e\xf8\xe8\x75\x25\x7a\x3f\xb0\x00\x6c\xd8\x78\x57\x09\x29\x6f\xec\x4a\x15\xb7\x86\x0f\x46\x57\xd3\x94\x4b\x99\x7f\xa5\xf3\x0b\x87\xb1\xe1\x2f\x86\xac\x56\x6a\x9e\xd7\xdb\xb2\xb2\x8d\xc2\x40\xbc\x6e\xb3\xd2\xd2\x81\x9c\xde\xdf\x47\x51\x16\x49\x5e\x8b\xa4\x0c\xe8\x0e\x04\xf9\xe2\x36\x28\x95\x7a\x37\x54\x91\x62\x77\x08\x7e\xec\xd3\x45\xd1\x1a\x6b\xb2\xd0\xfa\x10\x9f\x9c\xdf\xbd\x47\xec\xdf\x2a\x65\xb1\x94\x5f\x9b\x8d\xeb\x47\x06\x3e\xf7\x54\x09\xa6\xbf\x2c\x52\x46\x0f\x4e\xa9\x21\xcb\x4e\x68\x47\xaa\xc4\x1a\xc0\x5b\x7a\xb8\x96\x49\x69\x5a\xf0\x01\xf2\x67\xff\xb3\xd7\xc8\x04\x31\x2d\xa5\x02\xa1\xf6\xce\x9e\x2b\xc1\x61\x24\x21\x25\x39\x7d\x21\xcd\xb2\x6c\xcb\x19\x07\x1e\xbc\x15\xc5\x25\xc4\x42\x9b\xd3\x35\xab\x4d\x5f\x89\x70\x0c\xd4\xfe\x67\x64\x85\x35\x71\xb4\xc9\xbd\x66\x07\x35\xbb\x9d\xa6\x16\x47\xcb\x62\xff\x11\x9b\x3f\x65\x81\x97\x7b\xb6\xa1\x0c\x63\xdd\x19\x16\x90\xb0\x57\x96\x07\xa7\x3e\x98\x0e\xc3\xf9\xf2\xd4\xb2\xb8\x9b\x7f\x59\x44\x9e\xe5\x0b\x4d\x08\x69\x4d\xcb\xed\x97\x58\xd7\x04\xf7\x2f\x00\x00\xff\xff\xbe\xf6\xd7\x65\x7f\x03\x00\x00")

func templatesView_updateTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesView_updateTpl,
		"templates/view_update.tpl",
	)
}

func templatesView_updateTpl() (*asset, error) {
	bytes, err := templatesView_updateTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view_update.tpl", size: 895, mode: os.FileMode(420), modTime: time.Unix(1538383245, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0x32, 0xf7, 0x2b, 0xab, 0x67, 0x6f, 0x14, 0xf4, 0x22, 0xa3, 0x94, 0x7e, 0xf9, 0xd5, 0xab, 0xc4, 0xe1, 0x21, 0x2, 0xa5, 0x1a, 0xb5, 0x9e, 0xa5, 0xb0, 0xb2, 0x3d, 0x5e, 0xb5, 0xdb, 0xbf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/model.tpl": templatesModelTpl,

	"templates/routes.json.tpl": templatesRoutesJsonTpl,

	"templates/routes.tpl": templatesRoutesTpl,

	"templates/view_create.tpl": templatesView_createTpl,

	"templates/view_list.tpl": templatesView_listTpl,

	"templates/view_update.tpl": templatesView_updateTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"model.tpl":       &bintree{templatesModelTpl, map[string]*bintree{}},
		"routes.json.tpl": &bintree{templatesRoutesJsonTpl, map[string]*bintree{}},
		"routes.tpl":      &bintree{templatesRoutesTpl, map[string]*bintree{}},
		"view_create.tpl": &bintree{templatesView_createTpl, map[string]*bintree{}},
		"view_list.tpl":   &bintree{templatesView_listTpl, map[string]*bintree{}},
		"view_update.tpl": &bintree{templatesView_updateTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
