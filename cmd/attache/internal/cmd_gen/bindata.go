// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/model.tpl
// templates/routes.json.tpl
// templates/routes.tpl
// templates/view_create.tpl
// templates/view_list.tpl
// templates/view_update.tpl

package cmd_gen

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesModelTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\x41\x8b\xdb\x3c\x10\x86\xcf\xd6\xaf\x98\xcf\xf0\x15\xbb\x64\x95\x7b\x4b\x0e\xa5\x4b\x21\xa4\xe4\xd0\x6c\x7b\x29\x3d\x28\xf2\x38\xab\x56\x96\x1d\x69\xdc\xc5\x08\xfd\xf7\x62\xd9\xf5\x3a\xcb\x66\xd9\x86\xa5\xbd\x85\xc9\xcc\xbc\x0f\xcf\xd8\x6e\x84\xfc\x21\x0e\x08\x55\x5d\xa0\x76\x8c\xa9\xaa\xa9\x2d\x41\xc6\x92\xb4\x10\x24\xf6\xc2\xe1\xd2\x1d\x75\xca\x92\xf4\xa0\xe8\xb6\xdd\x73\x59\x57\xcb\x4a\xca\x5a\xeb\xef\x76\x29\x88\x84\xbc\xc5\x94\xe5\x8c\x51\xd7\x20\x78\xcf\xb7\xa2\xc2\x10\xc0\x91\x6d\x25\x81\x07\xef\xad\x30\x07\x04\xfe\x41\xa1\x2e\x5c\x08\xde\xf3\x5d\xfc\x33\x16\x42\xe8\x87\x6e\xba\x06\x43\x78\xeb\x3d\x9a\xbe\x12\x18\x2b\x5b\x23\x61\x8b\x77\xd3\xc6\x2c\x87\x31\x8e\xef\xa8\xb6\x28\xf6\x1a\xc1\x83\x45\x6a\xad\x01\x83\x77\xd9\xd4\x9a\x4f\x0b\xb2\x0a\x5e\xcf\xca\x37\xfd\x50\x96\xf7\x70\xca\x1c\xee\xa7\xbd\x6f\xac\x32\x54\x42\xfa\xff\x31\x05\x1e\xdb\x66\x18\x0f\xb6\xac\x8d\x43\x4b\x59\x0e\x99\xac\x75\x5b\x19\x07\x5f\xbf\x0d\x1b\x17\xf0\x53\xe8\x16\xfb\x82\x32\x84\xb6\x14\x12\x7d\xc8\xc1\xb3\xe4\x77\xeb\x6a\x6a\xf6\x2c\x49\xbc\xbf\x82\x13\x3d\x70\x15\x42\xac\x83\x2a\xc1\xd4\x04\x7c\x5b\x0f\x79\xd0\x9b\x83\x13\xce\xf7\x71\x27\x84\xb0\x18\xc5\x8d\x1b\xd1\x14\xc3\x9e\xc0\x92\x11\x68\x75\x8a\xf4\xe7\xd9\x15\x7f\x78\xb7\x27\x42\x07\xad\x2c\x30\xe6\xbd\x2a\x81\x5f\x63\x29\x5a\x4d\x1b\xec\x62\xcb\x63\x52\xdf\x95\x84\x76\x34\x6b\xd1\xb5\x9a\xc0\x1d\x35\xff\x14\x7f\x46\x83\xaa\x58\x00\x5a\x0b\x6f\x56\x30\x34\xf0\x8f\xc2\xd1\x30\xb2\x2e\xb2\x9c\x25\xaa\x8c\x0d\xff\xad\xc0\x28\xdd\x8f\x24\x8d\x30\x4a\x66\x68\x6d\x1e\xb9\x2a\xbe\xbe\x86\x15\xa8\x82\x05\x36\x32\x87\x33\x47\xfe\xdc\x14\x82\xf0\xef\x1d\x79\xc8\xfb\x37\x47\x9e\xb2\x2f\x3c\xf2\x63\xfe\x76\xa8\x51\x9e\x79\x49\x94\xa1\xfa\x65\xed\x0d\x69\x17\xda\x8b\x38\x97\xba\x9b\x92\x5f\xbd\xa0\xbc\x0d\x76\x03\xb8\xcb\xf2\x49\xc6\xfd\xe7\x6a\xa6\xe7\x3c\x63\xff\xde\x6d\xb0\x7b\x96\x92\x39\x5d\xff\xd9\x3b\xc3\xf4\x25\x3e\x66\x11\x69\xa6\x6a\xce\x75\x6a\xf0\x19\x70\xbd\x34\x98\x5b\x7b\x8a\xeb\x57\x00\x00\x00\xff\xff\x54\xc6\x3f\x94\xae\x06\x00\x00")

func templatesModelTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelTpl,
		"templates/model.tpl",
	)
}

func templatesModelTpl() (*asset, error) {
	bytes, err := templatesModelTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.tpl", size: 1710, mode: os.FileMode(420), modTime: time.Unix(1535629769, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0x39, 0xaa, 0x7, 0xf3, 0x28, 0xce, 0x37, 0x90, 0x5f, 0x4b, 0x11, 0xdd, 0x92, 0xe1, 0xe5, 0xf, 0x3b, 0x98, 0x3f, 0xc8, 0x3c, 0xc4, 0xae, 0x7f, 0x91, 0x1e, 0xf1, 0x9b, 0x3f, 0x96, 0xfa}}
	return a, nil
}

var _templatesRoutesJsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x95\x4d\x8f\xd3\x30\x10\x86\xcf\xf6\xaf\x30\x39\xac\x6c\xb4\x72\x56\x68\x4f\xa0\x3d\xb0\x34\xe5\x43\x4b\x17\xb5\x5d\x38\x22\x37\x9e\xb6\x5e\x1c\x3b\x9d\x38\x84\x2a\xca\x7f\x47\x69\xda\xf2\xd1\x8a\xd2\x6a\xe1\x00\xb7\x38\x23\xfb\x9d\x3c\xf3\x58\xc9\x55\xfa\x49\xcd\x80\x65\xca\x38\x4a\x4d\x96\x7b\x0c\x8c\x53\x12\x4d\xb3\x10\x51\x12\x39\x08\xf1\x3c\x84\xbc\x7d\x36\x3e\x36\xbe\x0c\xc6\xb6\x0b\xad\x82\x9a\xa8\x02\xe2\x62\xb1\x5a\x83\x4b\xbd\x36\x6e\x16\xdf\x17\xde\x45\x94\x92\x68\x66\xc2\xbc\x9c\xc8\xd4\x67\x71\x96\xa6\xde\xda\x7b\x8c\x55\x08\x2a\x9d\x43\x44\x05\xa5\xd3\xd2\xa5\x8c\xa7\xec\x71\x5d\xcb\x17\xde\x05\xf8\x12\xc6\xcb\x1c\x9a\x46\xb0\x97\xc9\xf8\x63\x5d\xcb\xb7\x5e\x83\x95\x03\x95\x41\xd3\xdc\x98\x22\x70\xc1\x6a\x4a\x2a\xf6\xf4\x8a\xa5\x72\x08\x45\xee\x5d\x01\x1f\xd0\x04\x40\x2e\x28\x51\xd6\x9e\x33\x40\xec\xea\xbd\x6b\x2e\xe4\x73\x6b\x79\x9b\xc3\x05\x5b\x47\xcb\x51\xf0\x08\x6a\x62\xa1\x66\x08\xa1\x44\xc7\x1c\x54\x3c\x6b\xa3\x0a\xf9\x53\xa8\x60\x8d\xa0\xc4\x4c\x57\xa7\x3e\xba\x62\xce\x58\x76\x76\xb6\x59\x15\x0b\x2b\x13\xc4\x81\x1f\xfa\xaa\x68\x3b\x23\x9b\x8c\x04\xd1\x63\x5f\x05\x65\x39\x20\x0a\x4a\x1a\xba\xad\x0d\xc1\x69\xc0\x37\xa3\xdb\x01\xaf\xce\x99\xb2\x56\xd0\xe6\x58\x18\x07\x40\xe0\xa6\xb0\x28\xa1\xa5\x46\x89\xd1\xed\x2b\x94\x7d\x8f\xd9\x7b\x65\x4b\xe0\x91\xd1\x91\xa0\xe4\xb3\x42\x16\x14\xce\x20\xb0\xfd\x08\xb6\x9f\xff\x0d\x6a\xdf\x38\xcd\xcf\xba\x5d\xe7\xcc\x68\xf1\xec\x7b\x3e\x2d\x87\xf5\x96\xab\x7d\x8c\x7e\x84\xc4\x2f\x2f\x2e\x05\x25\x2d\xa0\x13\xe8\x75\x3d\x1c\x02\xf8\xee\x76\xb4\x43\x70\x00\xd5\xd1\x10\x27\x5e\x2f\xb7\x82\x75\x37\x41\x0e\x41\xe9\x56\x32\x94\xd7\x5e\x2f\x77\x64\x39\x24\xc5\x51\xf8\xdb\x9b\x25\xef\x5c\xa6\xb0\x98\x2b\xcb\xbb\x76\xd6\x73\xd8\x9d\xc1\xaf\x62\x77\x46\xfa\xda\x15\x80\x81\x9f\x74\x58\x25\x57\xd0\x5e\x81\xd2\x80\xfc\xc9\xc5\xc5\x29\xf3\xf8\xff\x8c\xfe\x03\x36\x3d\xbc\x2a\x64\x0f\xac\xbb\x5c\xab\x00\x7f\xc9\x95\x5e\x72\x93\x8c\x93\x7f\xca\x96\x3d\x0c\x08\x21\xdd\xbf\xe8\x37\xbc\xd9\x69\xa7\x07\x16\x1e\x72\x1e\x5f\x03\x00\x00\xff\xff\xe7\x5f\xd3\x78\x13\x08\x00\x00")

func templatesRoutesJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRoutesJsonTpl,
		"templates/routes.json.tpl",
	)
}

func templatesRoutesJsonTpl() (*asset, error) {
	bytes, err := templatesRoutesJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/routes.json.tpl", size: 2067, mode: os.FileMode(420), modTime: time.Unix(1533132985, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x2e, 0x74, 0x1c, 0xd4, 0x98, 0xd8, 0xe1, 0x6f, 0x1d, 0x4e, 0x6d, 0x72, 0x43, 0x1f, 0x89, 0xaf, 0x5b, 0x9a, 0x20, 0xb8, 0xd7, 0xcb, 0x95, 0xb1, 0x5f, 0xd5, 0x32, 0x72, 0xd1, 0xb5, 0x63}}
	return a, nil
}

var _templatesRoutesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x95\x51\x6f\xd3\x3e\x14\xc5\x9f\xe3\x4f\xe1\x7f\xa4\xff\x64\xa3\xca\x9d\xd0\x9e\x40\x15\x02\xda\x32\xc4\x36\xa6\xb5\x8c\x47\xe4\xd9\xb7\x9d\xc1\x89\xb3\x9b\x9b\x95\xa9\xf2\x77\x47\x5e\xd3\x16\xb6\x82\x96\x3d\x20\xe0\xad\x8d\xe2\x73\xee\xfd\x9d\x63\xa5\xd2\xe6\x8b\x9e\x03\x2f\xb4\x2b\x19\x73\x45\x15\x90\xb8\x60\x59\x3e\x2b\x28\x67\x59\x5e\x02\xf5\x2f\x89\xaa\xf4\xdb\x6a\xd2\x17\xba\x86\x7e\x7d\xe5\x73\xc6\xb2\x7c\xee\xe8\xb2\xb9\x50\x26\x14\xfd\xc2\x98\xe0\xfd\x67\xec\x6b\x22\x6d\x2e\x21\x67\x92\xb1\x59\x53\x1a\x2e\x0c\x7f\xb2\x5c\xaa\xd7\xa1\x24\xf8\x4a\xd3\x9b\x0a\x62\x94\xfc\xcd\x68\xfa\x69\xb9\x54\xc7\xc1\x82\x57\x27\xba\x80\x18\x4f\x60\x21\x24\x5f\xb2\xac\x95\x50\x67\x50\x5a\xc0\xc3\xe9\xf1\x91\x30\x3d\x9e\x6f\x5e\x9f\xea\x0b\x0f\x31\x2a\x83\xa0\x09\x72\xc9\x62\x57\xab\x23\x57\x53\xeb\xe5\x7d\x8f\x03\x22\x7f\x36\xe0\x46\x0d\x5f\x09\xa9\x5e\x7a\x2f\x92\x9c\x90\x7c\x3d\xc9\x84\x02\x42\x72\x5d\x72\x04\x6a\xb0\xe4\x25\x2c\x44\x91\x14\x6b\x75\x47\x5b\xf2\x28\x59\xe6\x66\xb7\xaa\xff\x0d\x78\xe9\x3c\xdf\xdb\x5b\xff\xab\xaf\xbc\x1a\x21\x9e\x84\xb3\xb0\xa8\xd3\x00\x9b\x6d\x47\x88\x01\xc7\x9a\xb4\x17\x80\x28\x59\x16\x59\x66\xd4\x04\xe8\xdc\xc1\x62\xa8\x49\x0b\xed\xbd\x7c\x38\x1d\xef\x6a\x7a\x0c\x9b\x15\x97\x16\xc8\x19\x5c\x35\x90\x58\xb1\xcc\xd9\xf4\x08\xd5\x38\x60\x71\xae\x7d\x03\x22\x77\x36\x97\x2c\xbb\xd6\xc8\x49\xe3\x1c\x88\xef\x26\xb2\xa1\xb1\x65\x3c\x76\xa5\x15\x7b\xab\x53\x3d\xee\xac\x7c\xfe\x3d\xae\x84\xa5\x3d\x32\xd8\x85\xec\x47\x66\xe2\x60\xff\x40\xb2\x2c\xf1\xea\x00\x73\xe5\xdd\x81\x67\x53\xd9\x87\xb4\xed\xf4\xfd\xe4\xe7\xcd\xde\x41\x75\x43\x06\xd5\xa9\xc6\x1a\x12\x5e\x71\x1f\xc7\xaf\x16\xeb\x14\xc0\x5a\x28\xf9\x0c\xc1\x04\x0b\xdb\x1c\x56\xe1\x76\x33\xbf\x17\xed\xdb\xb2\x06\xa4\xb5\x68\x37\xb1\x6d\x16\xd6\x21\x18\x3a\xd5\x73\x10\xb3\x82\xd4\xa4\x42\x57\xd2\x4c\xe4\xfd\xbb\xb9\xbc\x70\x76\xf0\xff\x75\xde\x6b\x09\x6c\x57\x7f\x07\x37\x13\xc2\xc6\xd0\xd8\x81\xb7\x31\xca\xc7\x24\xf7\xcf\x5e\x86\xdf\x58\x88\x0f\xb7\x17\xe7\x2f\x2c\xc4\x70\x74\x34\x9a\x8e\x76\x57\x62\xb1\xae\x44\x5d\x85\xb2\x86\x8f\xe8\x08\x30\x35\xe3\xcf\xee\xca\x42\xdd\x4e\x7a\x08\xda\x02\x8a\xa7\xfb\xfb\xa9\x2b\xd9\xea\x9b\xd6\xa9\x35\xed\x38\x43\xf0\xf0\xd8\x6c\x77\xcc\x12\xbf\x05\x00\x00\xff\xff\x11\x97\x49\xf7\x8f\x08\x00\x00")

func templatesRoutesTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRoutesTpl,
		"templates/routes.tpl",
	)
}

func templatesRoutesTpl() (*asset, error) {
	bytes, err := templatesRoutesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/routes.tpl", size: 2191, mode: os.FileMode(420), modTime: time.Unix(1533133238, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x72, 0xe2, 0x9f, 0x36, 0x53, 0xb8, 0xff, 0xb0, 0xe, 0xcd, 0x77, 0x2e, 0x3f, 0xff, 0xdc, 0x85, 0xb, 0x64, 0xa, 0xd, 0x87, 0xc0, 0x48, 0xbe, 0xcd, 0xb2, 0xcc, 0x3e, 0x50, 0xf2, 0x8f, 0x3e}}
	return a, nil
}

var _templatesView_createTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\x4d\xce\x9b\x30\x10\x5d\x93\x53\x58\xb3\x07\x5f\xc0\xb0\xa9\x54\xa9\x9b\x6c\xda\x9d\x65\x55\x06\x0f\xa9\x25\x33\x46\x66\x48\x1a\x21\xee\x5e\x41\x20\x7c\x34\x2b\x8b\x37\xcf\xef\x67\xf0\x34\x39\x6c\x3d\xa1\x00\xf6\x1c\x10\xe6\xf9\x8a\x0f\xa1\x75\x71\xb5\x1d\x1a\x33\x4d\x48\x6e\x9e\x2f\x07\xad\x8e\xee\x09\xf3\x7c\x51\xce\xdf\x45\x13\xec\x30\x94\xd0\x44\x62\xeb\x09\x13\x54\x97\xec\x34\xb0\xc9\x2d\xd8\x07\x98\xaf\x32\xcb\x24\x53\x6d\x4c\x9d\x20\xdb\x61\x09\x84\x8f\xdf\x5a\x17\xbf\x6c\x1d\xd0\x18\x10\x1d\xf2\x9f\xe8\x4a\xe8\xe3\xc0\x20\x6c\xc3\x3e\x52\x09\xf2\xa0\x48\xc2\xc7\x4b\x26\x53\xad\xc7\xe0\x06\xe4\xd7\x67\xa6\x02\xde\x90\x5c\x75\xea\xa3\xe4\x86\xbe\x38\x5a\x27\x4b\x37\x14\xc5\xf7\xf5\xae\x31\x3b\x9c\x0b\xdf\x0a\x8a\x2c\x8a\x6b\xfc\x41\x03\x26\xde\x67\x5f\x9b\x2c\xc9\xf3\x5b\x8a\x63\xbf\x65\x58\x5c\x6d\x8d\x41\xb4\x31\x95\xa0\x75\xf1\x93\xd3\xd8\xf0\xaa\x6e\x0c\x54\xff\x23\x4a\xae\xf4\xf7\x65\x4f\xfd\xc8\x82\x9f\x3d\x96\xc0\xf8\x97\x61\xdb\xcb\x87\xd2\x29\xc1\xb2\xfe\x14\x03\xc8\xbd\xb9\x74\xfe\x5e\x1d\x55\x90\x9c\xc8\x8f\x6e\x48\xee\x5d\xe6\xab\xe1\x30\xd6\x9d\x67\x10\x77\x1b\x46\x2c\xe1\x5b\x42\xcb\xf8\x76\xaa\x99\x44\xcd\x94\xf7\xc9\x77\x36\x3d\x77\x33\x25\x4f\x6b\x57\x72\x49\xb4\xfe\xf1\x2d\xc4\x76\x6e\xc7\xf6\x9e\xfe\x05\x00\x00\xff\xff\x18\x91\xd2\x48\x76\x02\x00\x00")

func templatesView_createTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesView_createTpl,
		"templates/view_create.tpl",
	)
}

func templatesView_createTpl() (*asset, error) {
	bytes, err := templatesView_createTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view_create.tpl", size: 630, mode: os.FileMode(420), modTime: time.Unix(1533132384, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0x99, 0xea, 0x62, 0xff, 0x30, 0x41, 0x18, 0xac, 0xfe, 0x35, 0x46, 0x1e, 0x67, 0x19, 0xba, 0x24, 0x5c, 0xe0, 0xdd, 0x36, 0x1, 0x24, 0x6e, 0x31, 0xa1, 0xdf, 0x74, 0xf, 0x32, 0xf0, 0x86}}
	return a, nil
}

var _templatesView_listTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x4d\x6f\xe3\x20\x10\x3d\x27\xbf\x02\xa1\xbd\x1a\x0e\xb9\xad\xb0\xf7\xb2\xda\xcb\x56\xb9\xa4\xea\xc5\xe2\x40\xcc\xa4\x20\xb9\x58\xc2\xd3\x44\x11\xe2\xbf\x57\x80\xed\x24\x4d\x2a\x55\xbd\x30\xc3\xbc\xf9\x78\x6f\x34\x21\x68\x38\x58\x07\x84\xa2\xc5\x1e\x68\x8c\x6d\xcb\xb6\xea\x0d\xa4\x24\x4f\x76\xc4\x10\xc0\xe9\x18\xd7\x97\xbc\xfd\xa0\xcf\x34\x47\x4e\x16\x0d\x61\x2f\x16\x4e\x7f\x15\xaa\x18\xd7\x42\xdb\x23\xe9\x7a\x35\x8e\x35\xed\x06\x87\xca\x3a\xf0\xb4\x59\xaf\x6e\x00\xe5\x75\x8a\xdd\x05\xab\xdc\x39\x21\x2b\x61\x36\xcd\x2d\x0f\xc1\xcd\xa6\x40\xa8\xf6\x3d\xcc\x75\xe5\x93\xdf\x6a\x3f\x78\x0d\x1e\x4a\xf3\x94\x68\x40\xe9\xe2\xaf\x04\xfa\xc9\x6b\xdb\x8a\x78\xe5\x5e\x81\xb0\x7f\x16\x7a\x3d\x4a\x59\x80\x8c\xd8\x03\x71\x03\x12\xb6\x1d\x76\xd0\x43\x87\x0b\x28\xd0\x24\x46\x3b\xf4\xef\x1d\xe6\x42\x29\x05\x47\xd3\x5c\x15\x83\xd3\xa4\x9a\x2b\xa6\xc0\xfc\x15\x7c\x66\x90\xaa\x16\x62\x02\x93\xe8\xe2\x87\x30\xf1\x8a\xf1\x11\xe9\x5f\x45\xeb\xef\x9a\xb0\xe7\xe4\x5d\x0f\xfa\x91\xa0\x79\x37\x4b\x22\xfb\x0f\xe7\x24\x40\x28\x62\x3c\x1c\x6a\xca\xdb\xb6\x4c\x95\xf2\x8f\xd5\x75\x08\xec\xf3\x0a\x62\xa4\xcd\x9d\xf4\x24\xe5\x41\xe6\x57\xd3\xb8\x7a\xd0\x42\xf0\x0b\xbf\xef\xef\x76\xbe\xd6\x29\xba\xec\x56\xf0\x2c\x23\x5f\x1d\xd7\xf6\x98\x4e\xb2\xd8\xc9\x5c\xce\x3c\xdb\x8f\x00\x00\x00\xff\xff\x12\x78\xe0\x89\x16\x03\x00\x00")

func templatesView_listTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesView_listTpl,
		"templates/view_list.tpl",
	)
}

func templatesView_listTpl() (*asset, error) {
	bytes, err := templatesView_listTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view_list.tpl", size: 790, mode: os.FileMode(420), modTime: time.Unix(1533131445, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x3d, 0x27, 0xdc, 0xd0, 0x7e, 0x65, 0xa4, 0x24, 0x8a, 0x67, 0x6, 0x5a, 0xca, 0x89, 0x9d, 0xb8, 0xf4, 0xa6, 0xf4, 0xf3, 0xd4, 0xf5, 0x74, 0x1f, 0x8c, 0x9d, 0x86, 0x2f, 0xcd, 0x10, 0xa6}}
	return a, nil
}

var _templatesView_updateTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcb\x8e\x9c\x30\x10\x3c\x7b\xbe\xc2\xea\xfb\xc0\x0f\xe0\xc9\x25\xc9\x25\xd2\x5e\xf2\xb8\x58\x56\x64\xc6\xcd\x6c\x4b\xc6\x46\xa6\x99\x0d\x42\xfc\x7b\x04\x78\x1e\xec\x9c\x5a\x2e\x57\x57\x77\x95\x3d\x4d\x0e\x1b\x0a\x28\x81\x89\x3d\xc2\x3c\x7f\x73\xc4\x52\xeb\xe2\xcd\xb6\x68\xcc\x34\x61\x70\xf3\x7c\x78\xf0\xea\xe8\x46\x58\x91\x0f\xe2\x77\x59\xfc\x21\xfc\xf8\x6a\xd9\xce\xf3\xa1\x72\x74\x95\x67\x6f\xfb\x5e\xc1\x39\x06\xb6\x14\x30\xc1\xe9\x20\x76\x17\x36\xb9\x05\x7b\x01\x8f\xab\xf2\x72\x23\xaa\x26\xa6\x56\x06\xdb\xa2\x02\x74\xc4\x7f\xb5\x2e\x7e\xd9\xda\xa3\x31\x20\x5b\xe4\xf7\xe8\x14\x74\xb1\x67\x90\xf6\xcc\x14\x83\x82\xf2\x41\xf9\x42\x4e\x4d\x53\xa1\x75\xf1\x03\xc7\x9f\x9c\x86\x33\x7f\x27\xf4\xce\x98\x79\xde\xf4\x45\xd5\x2c\x40\x8f\xbc\x1d\x45\xe5\xf1\x82\xc1\x9d\xf6\xe6\xab\x32\xc3\x1b\x49\xeb\x64\xc3\x05\x65\xb1\xaa\xf5\xc6\xe4\xde\x27\x1f\xcb\xde\xc7\x4b\x8a\x43\x97\x07\x2d\xd2\xb6\x46\x2f\x9b\x98\x14\x68\x5d\xec\xf6\x81\xd3\x67\xa4\x2a\x57\xfa\xbd\x99\x42\x37\xb0\xe4\xb1\x43\x05\x8c\xff\x18\x72\x2a\x2f\x4a\xb9\x41\x88\xab\xf5\x03\x2a\xd8\x02\xf8\xec\x5e\xde\x69\x5a\x53\x23\x63\x92\xc5\x5b\xfc\xdd\x39\xcb\x28\x97\xb4\x8c\x49\x68\x5d\x0c\x7e\x54\xc0\x69\x40\xd0\x1a\x83\xbb\x39\x15\x42\x3c\xfb\x5c\x9e\x38\x45\x0f\xe5\x2d\xc4\xd2\xd1\xf5\x9e\xd5\x53\xdf\xce\x45\x3f\xd4\x2d\x31\xc8\xbc\xe7\x36\x1c\x6e\x01\xd6\x1c\x64\xcd\xe1\xd8\x25\x6a\x6d\x1a\x6f\xda\x55\xb9\x7b\xb0\xaa\x5c\x16\x58\x3f\x51\x9e\x99\x6b\x2e\x8f\x5f\xbb\xd6\xff\x01\x00\x00\xff\xff\x06\x51\xff\x66\xe5\x02\x00\x00")

func templatesView_updateTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesView_updateTpl,
		"templates/view_update.tpl",
	)
}

func templatesView_updateTpl() (*asset, error) {
	bytes, err := templatesView_updateTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/view_update.tpl", size: 741, mode: os.FileMode(420), modTime: time.Unix(1533131457, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0xf4, 0xdc, 0x57, 0xc9, 0xd7, 0xc8, 0x82, 0x63, 0x8e, 0x8a, 0x9e, 0x23, 0x62, 0xa0, 0x60, 0xfe, 0x21, 0xbf, 0x1, 0xd7, 0x2d, 0x44, 0x5d, 0x74, 0xb8, 0x72, 0x1f, 0x66, 0x80, 0xc0, 0x8e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/model.tpl": templatesModelTpl,

	"templates/routes.json.tpl": templatesRoutesJsonTpl,

	"templates/routes.tpl": templatesRoutesTpl,

	"templates/view_create.tpl": templatesView_createTpl,

	"templates/view_list.tpl": templatesView_listTpl,

	"templates/view_update.tpl": templatesView_updateTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"model.tpl":       &bintree{templatesModelTpl, map[string]*bintree{}},
		"routes.json.tpl": &bintree{templatesRoutesJsonTpl, map[string]*bintree{}},
		"routes.tpl":      &bintree{templatesRoutesTpl, map[string]*bintree{}},
		"view_create.tpl": &bintree{templatesView_createTpl, map[string]*bintree{}},
		"view_list.tpl":   &bintree{templatesView_listTpl, map[string]*bintree{}},
		"view_update.tpl": &bintree{templatesView_updateTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
