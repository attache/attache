// Code generated by go-bindata.
// sources:
// templates/.at-conf.json.tpl
// templates/index.tpl.tpl
// templates/layout.tpl.tpl
// templates/main.go.tpl
// DO NOT EDIT!

package cmd_new

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAtConfJsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x72\xce\xcf\x2b\x49\xad\x28\x09\xa9\x2c\x48\x55\xb2\x52\x50\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xe2\xaa\x05\x04\x00\x00\xff\xff\x3e\xe1\xfc\xf4\x22\x00\x00\x00")

func templatesAtConfJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAtConfJsonTpl,
		"templates/.at-conf.json.tpl",
	)
}

func templatesAtConfJsonTpl() (*asset, error) {
	bytes, err := templatesAtConfJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.at-conf.json.tpl", size: 34, mode: os.FileMode(420), modTime: time.Unix(1539008370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x0a\xc2\x30\x10\x85\xf7\x3d\xc5\x38\x07\x30\x17\xb0\x82\xa7\x70\xdd\x26\xaf\x74\x30\x26\x25\x19\xd1\x12\xe6\xee\x22\x04\x5c\xe8\xf6\xfd\x7c\x7c\xad\x05\x2c\x92\x40\xac\xa2\x11\x6c\x76\x45\xf4\xf9\x8e\xd6\x90\x82\xd9\xf0\x1d\x54\xdd\x23\x2a\x9b\x9d\xa2\xa4\x1b\x15\xc4\xb1\x67\x2b\xa0\x4c\x6b\xc1\x32\xb2\x7b\x62\x76\xbe\x56\x27\x29\xe0\x75\xf4\xb5\xb2\x3b\xff\x81\xf9\x22\x9b\x7e\x68\xbf\xdd\x9c\xc3\xce\x66\x43\x37\x21\xcd\xb4\xe7\x47\xa1\x8b\xea\xe4\x57\xd0\xb4\x6d\x51\xfc\xa4\x92\xd3\x61\xe8\xf7\x77\x00\x00\x00\xff\xff\x20\xca\x1d\xd9\xc8\x00\x00\x00")

func templatesIndexTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplTpl,
		"templates/index.tpl.tpl",
	)
}

func templatesIndexTplTpl() (*asset, error) {
	bytes, err := templatesIndexTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.tpl", size: 200, mode: os.FileMode(420), modTime: time.Unix(1539008370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x0a\x0a\x36\x19\xa9\x89\x29\x10\x26\x98\x5b\x92\x59\x92\x93\x6a\x57\x5d\x9d\x94\x93\x9f\x9c\xad\xa0\x04\xe6\x2a\x29\xe8\xd5\xd6\x46\x47\xeb\xf9\x25\xe6\xa6\xc6\xc6\x56\x57\xa7\xe6\xa5\xd4\xd6\xda\xe8\x43\x94\xc2\xb5\xc2\xf5\x14\x97\x54\xe6\xa4\x16\x83\x35\x41\xd5\x62\x51\x93\x5c\x94\x59\x50\x82\xa9\xc8\x46\x1f\xe1\x1e\x9b\xa4\xfc\x94\x4a\x2c\xe6\x83\x84\xc1\x1a\x91\xa4\x90\x4d\x80\x68\xb3\xd1\x07\x7b\x12\x10\x00\x00\xff\xff\xd6\xc2\xdf\x26\xfb\x00\x00\x00")

func templatesLayoutTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutTplTpl,
		"templates/layout.tpl.tpl",
	)
}

func templatesLayoutTplTpl() (*asset, error) {
	bytes, err := templatesLayoutTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.tpl.tpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1539008370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\xf6\xd3\xe1\xab\x64\x38\xd2\xa1\xb7\x00\xb9\xa4\xf9\x69\x80\xa4\x69\x63\xa3\x3d\x06\x2b\x6a\xad\x2c\x4a\x91\x34\xb9\xb2\xe3\x1a\x7e\xf7\x42\x7f\xb6\x53\x38\x87\xe8\x20\x91\xc3\x19\xce\x72\xb4\x74\xa8\x7e\x63\x45\x50\x23\x9b\x28\xe2\xda\x59\x2f\x90\x44\x00\x00\xb1\x21\xc9\x5f\x44\x5c\xdc\x4f\xb5\xad\xfa\x51\xf7\xca\x73\x28\x51\xb0\xc0\x40\x50\x7a\x5e\x91\x0f\x23\x9e\x78\xaa\xed\x8a\x40\xb3\xa1\x00\x1b\xdb\x40\x69\xcd\x27\x01\x43\x54\xa6\x1d\xe9\x19\xe2\x8a\xe5\xa5\x29\x32\x65\xeb\xbc\x46\x11\x93\x57\xf6\x2c\x2c\x35\x0b\x7d\x8e\xdb\x4d\x66\xfd\xf8\x04\xbd\x27\x9e\xf5\xa6\x79\xbd\x09\x4b\xdd\x29\x1e\x36\xb3\x1f\xf7\x27\xf8\x9a\x8b\xdc\x2d\x3b\xca\x77\x1b\xa4\xf2\xd4\xf2\xc6\x62\x51\x04\xd5\x0b\xf5\x47\x3c\x52\x0d\xf8\xf8\x8d\xa3\x34\x8a\x64\xe3\x08\xb6\xdb\xec\x1b\xd6\xb4\xdb\x41\x10\xdf\x28\x81\xed\xb8\x95\xa7\x65\xc3\x9e\xca\x6e\x3e\xe8\xb2\x4b\x0c\xf4\xc5\x1a\xa1\x57\x81\xbd\xa9\x42\x87\x05\x6b\x16\xa6\xf0\x86\x7d\x45\x0b\x6c\xb4\xdc\xb0\xa6\x19\xf9\x15\xf9\x53\xab\x3f\x99\xd6\xe1\x9f\xfa\xc7\xb5\xab\xcb\x16\x24\x83\x85\xa6\xc3\x0f\x52\xd6\x18\x52\xc2\x2b\x96\xcd\x3b\xc2\x19\x85\xc0\xd6\x1c\xa9\xc3\x80\x04\xb1\x1e\x2b\x8a\x76\x51\xb4\x68\x8c\x82\x44\xc1\x64\x1f\x42\x0a\x77\x86\x25\x59\x43\xdb\x28\xd9\x13\x05\x67\x4d\xa0\x5f\x9e\x85\xfc\x14\x3c\x4c\x06\x7c\xd9\x50\x90\x74\xcc\x6a\x02\xf3\xc7\xab\xc7\x73\x60\xc3\xc2\xa8\xf9\x4f\x57\x62\x97\xd1\x24\x6f\x8d\xf2\x1c\x6e\xaf\xe7\x90\x9f\x74\xbc\xbd\x9e\x3f\x7f\xd0\x51\x65\xad\xe8\xce\x94\xf4\x9a\xac\xa7\xe0\xd3\x63\x13\x6e\xe1\x77\x9d\x06\xd1\x87\xec\xc6\x6c\x9f\xc8\x94\xe4\xbf\xce\x1f\xee\x13\x35\x85\xb8\x33\x8a\xd3\x7d\x92\xed\xa5\x4b\xd2\x43\x03\x15\xd6\x4a\x10\x8f\x0e\xd0\x39\xcd\x0a\xa5\xcd\x7f\x61\xfd\x3e\x9d\xb7\x1d\xd8\x7b\x39\x37\x05\xf2\x1e\xce\x2f\x0e\x4d\x37\x6e\x94\xfc\xbf\x27\x6f\x77\xfd\xdd\xe3\x45\xc7\xfe\xef\x02\x0c\xeb\xc1\xbb\x7d\xb4\xad\xb2\x1b\x14\xd4\xda\x24\xe4\x7d\x4f\xde\xf5\x2d\x7b\xbc\x86\xce\x65\x4f\x8d\x49\xd2\xf6\x1c\x7f\x03\x00\x00\xff\xff\x40\xc4\x69\xca\x3f\x04\x00\x00")

func templatesMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGoTpl,
		"templates/main.go.tpl",
	)
}

func templatesMainGoTpl() (*asset, error) {
	bytes, err := templatesMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go.tpl", size: 1087, mode: os.FileMode(420), modTime: time.Unix(1539008413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.at-conf.json.tpl": templatesAtConfJsonTpl,
	"templates/index.tpl.tpl": templatesIndexTplTpl,
	"templates/layout.tpl.tpl": templatesLayoutTplTpl,
	"templates/main.go.tpl": templatesMainGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".at-conf.json.tpl": &bintree{templatesAtConfJsonTpl, map[string]*bintree{}},
		"index.tpl.tpl": &bintree{templatesIndexTplTpl, map[string]*bintree{}},
		"layout.tpl.tpl": &bintree{templatesLayoutTplTpl, map[string]*bintree{}},
		"main.go.tpl": &bintree{templatesMainGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

