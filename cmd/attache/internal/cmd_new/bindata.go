// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/.at-conf.json.tpl
// templates/index.tpl.tpl
// templates/layout.tpl.tpl
// templates/main.go.tpl

package cmd_new

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAtConfJsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x72\xce\xcf\x2b\x49\xad\x28\x09\xa9\x2c\x48\x55\xb2\x52\x50\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xe2\xaa\x05\x04\x00\x00\xff\xff\x3e\xe1\xfc\xf4\x22\x00\x00\x00")

func templatesAtConfJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAtConfJsonTpl,
		"templates/.at-conf.json.tpl",
	)
}

func templatesAtConfJsonTpl() (*asset, error) {
	bytes, err := templatesAtConfJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.at-conf.json.tpl", size: 34, mode: os.FileMode(420), modTime: time.Unix(1530473476, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x25, 0xde, 0xdd, 0x98, 0x95, 0x98, 0x11, 0x1b, 0x78, 0x73, 0xa, 0x6, 0x13, 0x27, 0x33, 0x5d, 0x51, 0x5f, 0x5, 0x9d, 0x1, 0x76, 0xfc, 0xdc, 0xb8, 0x27, 0x9c, 0x9c, 0xc, 0x79, 0xd2}}
	return a, nil
}

var _templatesIndexTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\x41\x0a\x02\x31\x0c\x45\xf7\x9e\xa2\xe4\x00\xf6\x02\x8e\xd7\x70\x3f\xed\x1f\x26\x18\x3b\xd2\x04\x74\x08\xb9\xbb\x58\x04\x17\xba\x7d\xef\xf1\xdc\x2b\x16\x6e\x48\x64\x6c\x02\x8a\xb8\x40\xca\x76\x83\x3b\x5a\x8d\x38\x7c\x03\xb5\x5d\xa0\x14\x71\x12\x6e\xd7\xd4\x21\xd3\x87\xad\x80\x51\x5a\x3b\x96\x89\xf2\x03\x73\x2e\xaa\x99\x5b\xc5\xf3\x58\x54\x29\x9f\xff\xcc\x4a\xe7\xbb\xbd\x6f\xbf\x6e\xde\xea\x4e\x83\x0c\xf3\x0a\x00\x00\xff\xff\xb1\x9a\xda\x4a\xa3\x00\x00\x00")

func templatesIndexTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplTpl,
		"templates/index.tpl.tpl",
	)
}

func templatesIndexTplTpl() (*asset, error) {
	bytes, err := templatesIndexTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.tpl", size: 163, mode: os.FileMode(420), modTime: time.Unix(1533095751, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0x9b, 0x59, 0x57, 0x8b, 0x2a, 0x90, 0x5, 0x23, 0x15, 0x13, 0x57, 0xcb, 0x68, 0x7, 0x5, 0xf5, 0x7d, 0x86, 0xf6, 0x62, 0x64, 0xeb, 0xcc, 0x39, 0x72, 0x0, 0x4e, 0xcd, 0x61, 0x4f, 0x92}}
	return a, nil
}

var _templatesLayoutTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x0a\x0a\x36\x19\xa9\x89\x29\x10\x26\x98\x5b\x92\x59\x92\x93\x6a\x57\x5d\x9d\x94\x93\x9f\x9c\xad\xa0\x04\xe6\x2a\x29\xe8\xd5\xd6\x46\x47\xeb\xf9\x25\xe6\xa6\xc6\xc6\x56\x57\xa7\xe6\xa5\xd4\xd6\xda\xe8\x43\x94\xc2\xb5\xc2\xf5\x14\x97\x54\xe6\xa4\x16\x83\x35\x41\xd5\x62\x51\x93\x5c\x94\x59\x50\x82\xa9\xc8\x46\x1f\xe1\x1e\x9b\xa4\xfc\x94\x4a\x2c\xe6\x83\x84\xc1\x1a\x91\xa4\x90\x4d\x80\x68\xb3\xd1\x07\x7b\x12\x10\x00\x00\xff\xff\xd6\xc2\xdf\x26\xfb\x00\x00\x00")

func templatesLayoutTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutTplTpl,
		"templates/layout.tpl.tpl",
	)
}

func templatesLayoutTplTpl() (*asset, error) {
	bytes, err := templatesLayoutTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.tpl.tpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1530470276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x66, 0xb7, 0xff, 0xed, 0xfe, 0xac, 0x1e, 0x7f, 0xdc, 0xb9, 0xe0, 0xea, 0x59, 0xaf, 0xd3, 0xf2, 0x4a, 0x4, 0xc2, 0x4f, 0x1f, 0x17, 0xaa, 0xcf, 0x3e, 0x90, 0xd, 0xa, 0x55, 0x13, 0xe0, 0x26}}
	return a, nil
}

var _templatesMainGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4f\x6f\xdb\x30\x0c\xc5\xef\xfa\x14\x9c\x0f\x83\x1c\x18\xd6\xbd\x40\x2f\x5d\xda\xae\xc0\xb6\x02\x69\xb0\x1d\x07\x45\x61\x12\x6e\x8a\xa4\x52\xf4\xd2\x2d\xf0\x77\x1f\xfc\x2f\xfd\x83\xf6\x50\x9f\x2c\xf1\x91\x3f\xf1\xe1\x25\xeb\x7e\xdb\x2d\xc2\xde\x52\x50\x8a\xf6\x29\xb2\x80\x56\x00\x00\x45\x40\x31\x3b\x91\x54\x0c\x47\x1f\xb7\x85\x1a\x7e\xb7\x24\xbb\x66\x55\xbb\xb8\x37\x7b\xe7\xa2\xf7\xbf\xd8\x58\x11\xeb\x76\x58\xa8\x52\x29\xf9\x9b\x10\x8e\xc7\xfa\x9b\xdd\x63\xdb\x42\x16\x6e\x9c\xc0\xb1\x6f\x36\x06\x18\xef\x1b\x62\x5c\xf7\xe7\xb1\xaf\xbe\xb0\x19\x3f\xc5\x20\xf8\x20\xa0\x26\xa5\xb3\xc9\xae\xc8\x93\x10\xe6\x67\xea\x39\x6e\x6c\xe3\xe5\x8a\x3c\xde\x21\xff\x41\x7e\xad\xfa\x9d\xf0\x90\xa7\x51\x2f\x6a\xf3\x8b\x37\x0a\x77\x98\x33\xc5\xa0\x5a\xa5\x36\x4d\x70\xa0\x1d\xcc\x4e\xab\x94\x70\x13\x48\xf4\x01\x3a\x5f\xea\x05\xe6\x14\x43\xc6\x1f\x4c\x82\x5c\x01\xc3\x6c\xbc\xbf\x6f\x30\x4b\x39\x6d\x3c\x83\xe5\xed\xfc\xf6\x0c\x28\x90\x90\xf5\xf4\x0f\xc1\x8d\x9b\xce\x4c\x07\x32\x06\xae\x2f\x97\x60\x5e\x25\x5e\x5f\x2e\x7f\xbe\x93\xe8\xea\xae\xe9\x26\xac\xf1\x41\x1f\x2a\xe0\xf2\x29\x84\xba\xeb\x37\x49\x63\xd3\xbb\x70\x93\x83\x0b\x0c\x6b\xe4\xcf\xcb\xaf\x5f\xb4\xab\xa0\xe8\x41\x45\x05\x87\x0a\x02\xf9\xf2\xe4\x68\x97\x35\x5d\x3e\xc6\x61\x15\xa3\x64\x61\x9b\xc0\xa6\xe4\xc9\x59\xa1\x18\x60\x13\xf9\xe4\xd2\xf3\x3c\x0d\xcc\x94\x2a\x40\x66\x38\x3b\x7f\x8c\xd0\x34\x48\x7f\x3c\x89\x8f\x6d\xd9\xeb\x69\xd3\xab\x3f\x9c\x77\x6f\x19\xd9\xdd\xe7\xe3\xb6\xbe\xb2\x62\xbd\x0f\x1a\x99\x07\x71\x3b\x04\xf0\x69\xcd\xa6\x54\x2f\x9a\xa0\xcb\x6e\x8f\xff\x01\x00\x00\xff\xff\x2d\x0f\xef\xbd\x36\x03\x00\x00")

func templatesMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGoTpl,
		"templates/main.go.tpl",
	)
}

func templatesMainGoTpl() (*asset, error) {
	bytes, err := templatesMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go.tpl", size: 822, mode: os.FileMode(420), modTime: time.Unix(1533095821, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0xd0, 0x6d, 0xea, 0x81, 0x51, 0x75, 0xa5, 0xb9, 0x20, 0x8a, 0xb8, 0x65, 0xf8, 0x53, 0xbb, 0x15, 0xd5, 0xbc, 0xab, 0xe6, 0x61, 0xb3, 0x76, 0x17, 0xc6, 0xcb, 0x9e, 0xd9, 0x33, 0xc, 0x71}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.at-conf.json.tpl": templatesAtConfJsonTpl,

	"templates/index.tpl.tpl": templatesIndexTplTpl,

	"templates/layout.tpl.tpl": templatesLayoutTplTpl,

	"templates/main.go.tpl": templatesMainGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".at-conf.json.tpl": &bintree{templatesAtConfJsonTpl, map[string]*bintree{}},
		"index.tpl.tpl":     &bintree{templatesIndexTplTpl, map[string]*bintree{}},
		"layout.tpl.tpl":    &bintree{templatesLayoutTplTpl, map[string]*bintree{}},
		"main.go.tpl":       &bintree{templatesMainGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
