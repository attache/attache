// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/Taskfile.yml.tpl (126B)
// templates/attache.json.tpl (34B)
// templates/go.mod.tpl (72B)
// templates/index.go.html.tpl (150B)
// templates/layout.go.html.tpl (251B)
// templates/main.go.tpl (1.064kB)

package cmd_new

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTaskfileYmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xca\x31\x0e\xc2\x30\x0c\x85\xe1\xdd\xa7\xf8\x55\xe6\x3a\x03\x5b\x6e\x53\x51\x03\x11\x90\xa0\xd8\xe4\xfc\x28\x30\x77\x7a\x4f\xfa\xfe\x13\xf7\x88\xb7\xe7\x94\x62\xf3\xc7\xb5\x3c\x4d\x77\x1b\x22\xc3\xba\x97\x56\x33\xcb\x79\x11\x99\xe6\x59\x20\xcc\x63\x2e\x5c\x5e\xbb\xff\x1f\xac\xdc\xda\x8f\x58\x07\x9a\x54\x55\x40\xc0\x63\xeb\x47\x79\xff\x54\xf4\x1b\x00\x00\xff\xff\x59\x33\x4f\x31\x7e\x00\x00\x00")

func templatesTaskfileYmlTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTaskfileYmlTpl,
		"templates/Taskfile.yml.tpl",
	)
}

func templatesTaskfileYmlTpl() (*asset, error) {
	bytes, err := templatesTaskfileYmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Taskfile.yml.tpl", size: 126, mode: os.FileMode(0644), modTime: time.Unix(1606361766, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0x4, 0x3a, 0x28, 0xf, 0xb, 0x96, 0xd, 0xff, 0xea, 0x58, 0x6d, 0x3c, 0xcc, 0xd1, 0x66, 0xb6, 0x2c, 0xb2, 0x3d, 0x4f, 0xcc, 0x8e, 0x4, 0xec, 0x9c, 0x33, 0xce, 0x38, 0x91, 0x8f, 0x5c}}
	return a, nil
}

var _templatesAttacheJsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x72\xce\xcf\x2b\x49\xad\x28\x09\xa9\x2c\x48\x55\xb2\x52\x50\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xe2\xaa\x05\x04\x00\x00\xff\xff\x3e\xe1\xfc\xf4\x22\x00\x00\x00")

func templatesAttacheJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAttacheJsonTpl,
		"templates/attache.json.tpl",
	)
}

func templatesAttacheJsonTpl() (*asset, error) {
	bytes, err := templatesAttacheJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/attache.json.tpl", size: 34, mode: os.FileMode(0644), modTime: time.Unix(1606360425, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x25, 0xde, 0xdd, 0x98, 0x95, 0x98, 0x11, 0x1b, 0x78, 0x73, 0xa, 0x6, 0x13, 0x27, 0x33, 0x5d, 0x51, 0x5f, 0x5, 0x9d, 0x1, 0x76, 0xfc, 0xdc, 0xb8, 0x27, 0x9c, 0x9c, 0xc, 0x79, 0xd2}}
	return a, nil
}

var _templatesGoModTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\x55\xa8\xae\xd6\x73\xc9\x2c\xaa\xad\xe5\xe2\x4a\xcf\x57\x30\xd4\x33\x34\xe5\xe2\x2a\x4a\x2d\x2c\xcd\x2c\x4a\x55\xd0\xe0\xe2\x4c\xcf\x2c\xc9\x28\x4d\xd2\x4b\xce\xcf\xd5\x4f\x2c\x29\x49\x4c\xce\x48\x85\xd1\x0a\x65\x06\x7a\x66\x7a\x06\x5c\x9a\x80\x00\x00\x00\xff\xff\x93\x4d\xdd\x9b\x48\x00\x00\x00")

func templatesGoModTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGoModTpl,
		"templates/go.mod.tpl",
	)
}

func templatesGoModTpl() (*asset, error) {
	bytes, err := templatesGoModTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/go.mod.tpl", size: 72, mode: os.FileMode(0644), modTime: time.Unix(1606362289, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x12, 0x3a, 0xd2, 0x56, 0x46, 0xd6, 0xff, 0x74, 0xee, 0x13, 0xcb, 0xf2, 0x5, 0xc2, 0xd4, 0xc3, 0x91, 0x23, 0x73, 0x5b, 0x54, 0x29, 0x3e, 0x9f, 0x37, 0x9b, 0xb1, 0xb7, 0x7d, 0x69, 0x45}}
	return a, nil
}

var _templatesIndexGoHtmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x31\x0e\x42\x21\x10\x84\xe1\x9e\x53\xac\xdc\xc4\x53\x58\x23\xac\x71\x13\x64\xc9\x7b\x63\x41\x36\x73\x77\x9b\x97\xd8\x50\x7f\x33\x7f\x44\xd3\x97\x0d\x95\x0c\x43\xd7\x4c\x3e\xb4\x57\xff\x68\x84\x8e\x46\xa6\xff\xe0\xc4\xea\x7a\x66\x72\x43\xf5\xb0\x89\xbd\x3d\xbd\xad\x4c\xa6\xab\x2b\x70\x59\xfe\x3d\xe4\x0e\x94\xfa\x56\x29\x73\x76\xab\x05\xe6\xe3\x96\xae\xfb\x2f\x00\x00\xff\xff\x06\x47\x5f\x5d\x96\x00\x00\x00")

func templatesIndexGoHtmlTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexGoHtmlTpl,
		"templates/index.go.html.tpl",
	)
}

func templatesIndexGoHtmlTpl() (*asset, error) {
	bytes, err := templatesIndexGoHtmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.go.html.tpl", size: 150, mode: os.FileMode(0644), modTime: time.Unix(1606364408, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x99, 0xc8, 0xcd, 0xf4, 0x76, 0x6c, 0xa1, 0x6d, 0x9f, 0x55, 0x8e, 0xc9, 0x7a, 0xc9, 0xcf, 0x21, 0xf6, 0x59, 0x13, 0xa9, 0x59, 0x60, 0xfe, 0x33, 0x9c, 0x3b, 0xf, 0xd3, 0x1f, 0x7, 0x2d, 0xcd}}
	return a, nil
}

var _templatesLayoutGoHtmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x0a\x0a\x36\x19\xa9\x89\x29\x10\x26\x98\x5b\x92\x59\x92\x93\x6a\x57\x5d\x9d\x94\x93\x9f\x9c\xad\xa0\x04\xe6\x2a\x29\xe8\xd5\xd6\x46\x47\xeb\xf9\x25\xe6\xa6\xc6\xc6\x56\x57\xa7\xe6\xa5\xd4\xd6\xda\xe8\x43\x94\xc2\xb5\xc2\xf5\x14\x97\x54\xe6\xa4\x16\x83\x35\x41\xd5\x62\x51\x93\x5c\x94\x59\x50\x82\xa9\xc8\x46\x1f\xe1\x1e\x9b\xa4\xfc\x94\x4a\x2c\xe6\x83\x84\xc1\x1a\x91\xa4\x90\x4d\x80\x68\xb3\xd1\x07\x7b\x12\x10\x00\x00\xff\xff\xd6\xc2\xdf\x26\xfb\x00\x00\x00")

func templatesLayoutGoHtmlTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutGoHtmlTpl,
		"templates/layout.go.html.tpl",
	)
}

func templatesLayoutGoHtmlTpl() (*asset, error) {
	bytes, err := templatesLayoutGoHtmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.go.html.tpl", size: 251, mode: os.FileMode(0644), modTime: time.Unix(1606364400, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x66, 0xb7, 0xff, 0xed, 0xfe, 0xac, 0x1e, 0x7f, 0xdc, 0xb9, 0xe0, 0xea, 0x59, 0xaf, 0xd3, 0xf2, 0x4a, 0x4, 0xc2, 0x4f, 0x1f, 0x17, 0xaa, 0xcf, 0x3e, 0x90, 0xd, 0xa, 0x55, 0x13, 0xe0, 0x26}}
	return a, nil
}

var _templatesMainGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x70\x3e\x0c\x76\xd0\x5a\x87\xdd\x0a\xf4\xd2\xf5\x63\x05\xda\x75\x6b\x82\xed\x58\x30\x0a\xe3\x70\x95\x25\x45\xa2\xd3\x66\x41\xfe\xfb\xe0\xcf\xa6\x43\xaa\x43\x62\x92\xef\xf1\x99\xcf\x94\x47\xfd\x8c\x25\x41\x85\x6c\x93\x84\x2b\xef\x82\x40\x96\x00\x00\xa4\x96\x44\xad\x44\x7c\xda\x85\xc6\x95\xdd\x53\xfb\xa3\x14\x2c\x50\x70\x8e\x91\x60\x11\x78\x43\x21\x0e\xf9\xac\xb6\xda\x55\x15\x59\x01\x59\x11\x18\xb6\x14\x61\xeb\x6a\xb0\x44\x8b\x7c\x40\x3d\x41\x5a\xb2\xac\xea\x79\xa1\x5d\xa5\x2a\x14\xb1\xaa\x74\xa7\x71\x6d\x58\xe8\x4b\xda\xa3\xa6\x5d\x78\x9c\xd4\xc1\x4f\x3b\x79\x55\x6d\xe3\xda\xa4\x0d\xea\x7e\x3b\xfd\x79\x77\x9c\xf2\x07\xf5\xb3\x56\xbe\x7c\x6d\x05\xfa\xa3\x14\xfc\x70\x51\xca\x40\x0d\x6f\x20\xa2\x08\xea\x15\x75\xc3\x1f\xb4\xe8\xf3\xc3\x7f\x9a\xe4\x49\x22\x5b\x4f\xb0\xdb\x15\xdf\xb1\xa2\xfd\x1e\xa2\x84\x5a\x0b\xec\x86\x56\x81\xd6\x35\x07\x5a\xb4\x71\xcf\x2b\x2e\x30\xd2\x57\x67\x85\x5e\x05\x46\x51\x8d\x1e\xe7\x6c\x58\x98\xe2\x3b\xf4\x25\x2d\xb1\x36\x72\x65\x37\x1c\x9c\x6d\xcc\x3d\x56\xbe\x66\x43\x53\x0a\x1b\x0a\xc7\xaa\xbf\x98\x5e\xe2\x7f\xe3\x0d\xb5\xcb\x8b\x26\x49\x16\xe7\x86\xde\xbe\xac\x76\xd6\x92\x16\xde\xb0\x6c\x3f\x20\x4e\x29\x46\x76\xf6\x80\x1d\xfb\x4c\x14\x17\xb0\xa4\x64\x9f\x24\xcb\xda\x6a\xc8\x34\x4c\x46\x8f\x72\xb8\xb5\x2c\xd9\x0b\x34\x1b\x56\x3c\x52\xf4\xce\x46\xfa\x1d\x58\x28\x9c\x40\x80\x49\x9f\x5f\xd7\x14\x25\x1f\xac\x9c\xc0\xec\xe1\xf2\xe1\x0c\xd8\xb2\x30\x1a\xfe\xdb\xbe\x62\x6b\xe1\x44\x35\x42\x4a\xc1\xcd\xd5\x0c\xd4\x51\xc5\x9b\xab\xd9\x53\x36\xf4\xd2\x45\x13\xde\xda\x05\xbd\x66\xf9\x21\x95\x9b\xd4\x87\xfc\x9e\xd0\x37\x19\xbc\x78\x24\xbb\xa0\xf0\x6d\x76\x7f\x97\xe9\x13\x48\xdb\x16\x69\x3e\x4e\xde\xdc\xae\x91\xa3\x14\xcc\x9d\x93\x28\x01\x3d\xa0\xf7\x86\x35\x4a\xe3\xd7\xd2\x85\x71\x9a\xf7\x0b\xd5\x69\x79\x7f\x02\x14\x02\x9c\x9d\xbf\xed\xd0\xd0\x28\xfb\x3c\x82\x77\xfb\xee\x8e\xf1\xb2\x45\x7f\x3a\x07\xcb\xa6\xd7\x6e\x8e\x71\x65\x71\x8d\x82\xc6\xd8\x8c\x42\xe8\xc0\xfb\x6e\x03\x0f\x6b\xe8\x7d\xf1\x58\xdb\x2c\x6f\xe6\xf8\x17\x00\x00\xff\xff\xbe\x2f\x3b\x71\x28\x04\x00\x00")

func templatesMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGoTpl,
		"templates/main.go.tpl",
	)
}

func templatesMainGoTpl() (*asset, error) {
	bytes, err := templatesMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go.tpl", size: 1064, mode: os.FileMode(0644), modTime: time.Unix(1606362449, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x3, 0xfe, 0xf6, 0x12, 0xbd, 0x1b, 0x5c, 0xac, 0xe8, 0xc9, 0xbe, 0xe9, 0x2c, 0x0, 0x5c, 0x96, 0x68, 0x4e, 0xff, 0xe, 0x66, 0xa1, 0xf0, 0x5a, 0x28, 0xf6, 0x74, 0xb6, 0x6c, 0x28, 0xc4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Taskfile.yml.tpl":   templatesTaskfileYmlTpl,
	"templates/attache.json.tpl":   templatesAttacheJsonTpl,
	"templates/go.mod.tpl":         templatesGoModTpl,
	"templates/index.go.html.tpl":  templatesIndexGoHtmlTpl,
	"templates/layout.go.html.tpl": templatesLayoutGoHtmlTpl,
	"templates/main.go.tpl":        templatesMainGoTpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"Taskfile.yml.tpl": {templatesTaskfileYmlTpl, map[string]*bintree{}},
		"attache.json.tpl": {templatesAttacheJsonTpl, map[string]*bintree{}},
		"go.mod.tpl": {templatesGoModTpl, map[string]*bintree{}},
		"index.go.html.tpl": {templatesIndexGoHtmlTpl, map[string]*bintree{}},
		"layout.go.html.tpl": {templatesLayoutGoHtmlTpl, map[string]*bintree{}},
		"main.go.tpl": {templatesMainGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
