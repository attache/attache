// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/.at-conf.json.tpl
// templates/index.tpl.tpl
// templates/layout.tpl.tpl
// templates/main.go.tpl

package cmd_new

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAtConfJsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x72\xce\xcf\x2b\x49\xad\x28\x09\xa9\x2c\x48\x55\xb2\x52\x50\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xe2\xaa\x05\x04\x00\x00\xff\xff\x3e\xe1\xfc\xf4\x22\x00\x00\x00")

func templatesAtConfJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAtConfJsonTpl,
		"templates/.at-conf.json.tpl",
	)
}

func templatesAtConfJsonTpl() (*asset, error) {
	bytes, err := templatesAtConfJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.at-conf.json.tpl", size: 34, mode: os.FileMode(420), modTime: time.Unix(1539011717, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x25, 0xde, 0xdd, 0x98, 0x95, 0x98, 0x11, 0x1b, 0x78, 0x73, 0xa, 0x6, 0x13, 0x27, 0x33, 0x5d, 0x51, 0x5f, 0x5, 0x9d, 0x1, 0x76, 0xfc, 0xdc, 0xb8, 0x27, 0x9c, 0x9c, 0xc, 0x79, 0xd2}}
	return a, nil
}

var _templatesIndexTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x0a\xc2\x30\x10\x85\xf7\x3d\xc5\x38\x07\x30\x17\xb0\x82\xa7\x70\xdd\x26\xaf\x74\x30\x26\x25\x19\xd1\x12\xe6\xee\x22\x04\x5c\xe8\xf6\xfd\x7c\x7c\xad\x05\x2c\x92\x40\xac\xa2\x11\x6c\x76\x45\xf4\xf9\x8e\xd6\x90\x82\xd9\xf0\x1d\x54\xdd\x23\x2a\x9b\x9d\xa2\xa4\x1b\x15\xc4\xb1\x67\x2b\xa0\x4c\x6b\xc1\x32\xb2\x7b\x62\x76\xbe\x56\x27\x29\xe0\x75\xf4\xb5\xb2\x3b\xff\x81\xf9\x22\x9b\x7e\x68\xbf\xdd\x9c\xc3\xce\x66\x43\x37\x21\xcd\xb4\xe7\x47\xa1\x8b\xea\xe4\x57\xd0\xb4\x6d\x51\xfc\xa4\x92\xd3\x61\xe8\xf7\x77\x00\x00\x00\xff\xff\x20\xca\x1d\xd9\xc8\x00\x00\x00")

func templatesIndexTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplTpl,
		"templates/index.tpl.tpl",
	)
}

func templatesIndexTplTpl() (*asset, error) {
	bytes, err := templatesIndexTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.tpl", size: 200, mode: os.FileMode(420), modTime: time.Unix(1539011717, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xa2, 0xca, 0x22, 0x19, 0xf9, 0x8a, 0xd7, 0xc3, 0xbf, 0x5a, 0xbe, 0xde, 0x3a, 0xbb, 0x86, 0x42, 0x88, 0x2c, 0x63, 0xd2, 0x15, 0x81, 0x75, 0xa9, 0x26, 0x1b, 0x77, 0x9c, 0xe7, 0xf9, 0xb7}}
	return a, nil
}

var _templatesLayoutTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x0a\x0a\x36\x19\xa9\x89\x29\x10\x26\x98\x5b\x92\x59\x92\x93\x6a\x57\x5d\x9d\x94\x93\x9f\x9c\xad\xa0\x04\xe6\x2a\x29\xe8\xd5\xd6\x46\x47\xeb\xf9\x25\xe6\xa6\xc6\xc6\x56\x57\xa7\xe6\xa5\xd4\xd6\xda\xe8\x43\x94\xc2\xb5\xc2\xf5\x14\x97\x54\xe6\xa4\x16\x83\x35\x41\xd5\x62\x51\x93\x5c\x94\x59\x50\x82\xa9\xc8\x46\x1f\xe1\x1e\x9b\xa4\xfc\x94\x4a\x2c\xe6\x83\x84\xc1\x1a\x91\xa4\x90\x4d\x80\x68\xb3\xd1\x07\x7b\x12\x10\x00\x00\xff\xff\xd6\xc2\xdf\x26\xfb\x00\x00\x00")

func templatesLayoutTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutTplTpl,
		"templates/layout.tpl.tpl",
	)
}

func templatesLayoutTplTpl() (*asset, error) {
	bytes, err := templatesLayoutTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.tpl.tpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1539011717, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x66, 0xb7, 0xff, 0xed, 0xfe, 0xac, 0x1e, 0x7f, 0xdc, 0xb9, 0xe0, 0xea, 0x59, 0xaf, 0xd3, 0xf2, 0x4a, 0x4, 0xc2, 0x4f, 0x1f, 0x17, 0xaa, 0xcf, 0x3e, 0x90, 0xd, 0xa, 0x55, 0x13, 0xe0, 0x26}}
	return a, nil
}

var _templatesMainGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\xf6\xd3\xe1\xab\x64\x38\xd2\xa1\xb7\x00\xb9\xa4\xf9\x69\x80\xa4\x69\x63\xa3\x3d\x06\x14\xb5\x56\x16\xa5\x48\x7a\xb9\xb2\xe3\x1a\x7e\xf7\x42\x7f\xb6\x53\x38\x87\xe8\x20\x91\xb3\x33\x1c\x72\xb4\xf4\x4a\xff\x56\x15\x42\xad\xc8\x46\x11\xd5\xde\xb1\x40\x12\x01\x00\xc4\x16\x25\x7f\x11\xf1\x71\x3f\x35\xae\xea\x47\xdd\x2b\xcf\xa1\x54\xa2\x0a\x15\x10\x4a\xa6\x15\x72\x18\xf1\x84\xb1\x76\x2b\x04\x43\x16\x03\x6c\x5c\x03\xa5\xb3\x9f\x04\x2c\x62\x99\x76\xa4\x67\x88\x2b\x92\x97\xa6\xc8\xb4\xab\xf3\x5a\x89\xd8\xbc\x72\x67\x61\x69\x48\xf0\x73\xdc\x2e\x32\xeb\xc7\x27\xe8\x3d\xf1\xac\x37\xcd\xeb\x4d\x58\x9a\x4e\xf1\xb0\x99\xfd\xb8\x3f\xc1\x37\x54\xe4\x7e\xd9\x51\xbe\xbb\x20\x15\x63\xcb\x1b\x37\xab\x44\x94\x7e\xc1\xfe\x88\x47\xaa\x01\x1f\xbf\x71\x94\x46\x91\x6c\x3c\xc2\x76\x9b\x7d\x53\x35\xee\x76\x10\x84\x1b\x2d\xb0\x1d\x97\x62\x5c\x36\xc4\x58\x76\xf3\x41\x97\x5d\xaa\x80\x5f\x9c\x15\x7c\x15\xd8\x9b\x6a\xe5\x55\x41\x86\x84\x30\xbc\x61\x5f\xe1\x42\x35\x46\xae\xed\x8a\xd8\xd9\x1a\xad\x9c\x2a\xdf\x90\xc1\x19\xf2\x0a\xf9\x54\xf5\x27\xe1\x3a\xfc\x73\xbc\xb1\x76\x75\xd9\x82\x68\x55\x61\xf0\xf0\xff\xb4\xb3\x16\xb5\xd0\x8a\x64\xf3\x8e\x70\x86\x21\x90\xb3\x47\xea\x30\x20\x41\x1c\xab\x0a\xa3\x5d\x14\x2d\x1a\xab\x21\xd1\x30\xd9\x67\x94\xc2\x9d\x25\x49\xd6\xd0\xf6\x51\xf6\x84\xc1\x3b\x1b\xf0\x17\x93\x20\x4f\x81\x61\x32\xe0\xcb\x06\x83\xa4\x63\x94\x13\x98\x3f\x5e\x3d\x9e\x03\x59\x12\x52\x86\xfe\x74\x5b\xec\x22\x9c\xe4\xad\x51\x9e\xc3\xed\xf5\x1c\xf2\x93\x8e\xb7\xd7\xf3\xe7\x0f\x3a\xea\xac\x15\xdd\xd9\x12\x5f\x93\xf5\x14\x38\x3d\x36\xa1\x16\x7e\xd7\x69\x10\x7d\xc8\x6e\xcc\xf6\x09\x6d\x89\xfc\x75\xfe\x70\x9f\xe8\x29\xc4\x9d\x51\x9c\xee\x93\x6c\xef\x64\x92\x1e\xfa\xab\x70\x4e\x82\xb0\xf2\xa0\xbc\x37\xa4\x95\xb4\xf9\x2f\x1c\xef\xd3\x79\xdb\xa0\xbd\x97\xf7\x53\x40\x66\x38\xbf\x38\xf4\xe4\xb8\x50\xf2\xff\x9e\xbc\xdd\xf5\x57\x93\x16\x1d\xfb\xbf\x0b\xb0\x64\x06\xef\xf6\x31\xae\xca\x6e\x94\x28\x63\x6c\x82\xcc\x3d\x79\xd7\x77\xf4\x71\x4d\x79\x9f\x3d\x35\x36\x49\xdb\x73\xfc\x0d\x00\x00\xff\xff\xa5\x8d\xb8\x7c\x5e\x04\x00\x00")

func templatesMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGoTpl,
		"templates/main.go.tpl",
	)
}

func templatesMainGoTpl() (*asset, error) {
	bytes, err := templatesMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go.tpl", size: 1118, mode: os.FileMode(420), modTime: time.Unix(1539087339, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xb2, 0xa2, 0x98, 0xa6, 0x7e, 0x24, 0xf6, 0xe3, 0x7e, 0x98, 0xcf, 0x38, 0x2b, 0x16, 0xb3, 0x9c, 0x3f, 0xaa, 0xaa, 0x3e, 0xed, 0x75, 0x36, 0xd3, 0xd6, 0x1b, 0xdd, 0x6b, 0xf0, 0xb7, 0xf5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.at-conf.json.tpl": templatesAtConfJsonTpl,

	"templates/index.tpl.tpl": templatesIndexTplTpl,

	"templates/layout.tpl.tpl": templatesLayoutTplTpl,

	"templates/main.go.tpl": templatesMainGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".at-conf.json.tpl": &bintree{templatesAtConfJsonTpl, map[string]*bintree{}},
		"index.tpl.tpl":     &bintree{templatesIndexTplTpl, map[string]*bintree{}},
		"layout.tpl.tpl":    &bintree{templatesLayoutTplTpl, map[string]*bintree{}},
		"main.go.tpl":       &bintree{templatesMainGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
