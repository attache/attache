// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/.at-conf.json.tpl
// templates/index.tpl.tpl
// templates/layout.tpl.tpl
// templates/main.go.tpl

package cmd_new

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAtConfJsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x72\xce\xcf\x2b\x49\xad\x28\x09\xa9\x2c\x48\x55\xb2\x52\x50\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\xe2\xaa\x05\x04\x00\x00\xff\xff\x3e\xe1\xfc\xf4\x22\x00\x00\x00")

func templatesAtConfJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAtConfJsonTpl,
		"templates/.at-conf.json.tpl",
	)
}

func templatesAtConfJsonTpl() (*asset, error) {
	bytes, err := templatesAtConfJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.at-conf.json.tpl", size: 34, mode: os.FileMode(420), modTime: time.Unix(1530471133, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x25, 0xde, 0xdd, 0x98, 0x95, 0x98, 0x11, 0x1b, 0x78, 0x73, 0xa, 0x6, 0x13, 0x27, 0x33, 0x5d, 0x51, 0x5f, 0x5, 0x9d, 0x1, 0x76, 0xfc, 0xdc, 0xb8, 0x27, 0x9c, 0x9c, 0xc, 0x79, 0xd2}}
	return a, nil
}

var _templatesIndexTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\x41\x0a\xc2\x40\x0c\x85\xe1\xbd\xa7\x18\x72\x00\xe7\x02\xd6\x6b\xb8\xef\xcc\x2b\x0d\xc6\x14\x9a\x80\x96\x90\xbb\x0b\x83\xe0\xa2\xdb\xef\x3d\xfe\x88\x8e\x85\x15\x85\x9c\x5d\x40\x99\x0f\x48\xdb\x5e\x88\x80\xf6\xcc\xcb\xff\x60\x7e\x08\x8c\x32\x6f\xc2\xfa\x2c\x3b\x64\xfa\xd9\x0a\x38\x95\x75\xc7\x32\x51\x7d\x63\xae\xcd\xac\xb2\x76\x7c\xae\xcd\x8c\xea\xfd\x1c\x9b\xb7\x7e\xd0\x90\xb1\x7c\x03\x00\x00\xff\xff\xa6\x6a\xf6\x2b\x87\x00\x00\x00")

func templatesIndexTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplTpl,
		"templates/index.tpl.tpl",
	)
}

func templatesIndexTplTpl() (*asset, error) {
	bytes, err := templatesIndexTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.tpl", size: 135, mode: os.FileMode(420), modTime: time.Unix(1530470276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x45, 0xc1, 0xcb, 0x9e, 0x77, 0xf6, 0x60, 0x29, 0xc9, 0x27, 0xae, 0x44, 0xbe, 0xcc, 0x7b, 0xe6, 0xb1, 0x89, 0x2c, 0x65, 0xd6, 0xb4, 0x4a, 0xa3, 0x3c, 0x75, 0x69, 0x9c, 0x17, 0x5, 0x8}}
	return a, nil
}

var _templatesLayoutTplTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x0a\x0a\x36\x19\xa9\x89\x29\x10\x26\x98\x5b\x92\x59\x92\x93\x6a\x57\x5d\x9d\x94\x93\x9f\x9c\xad\xa0\x04\xe6\x2a\x29\xe8\xd5\xd6\x46\x47\xeb\xf9\x25\xe6\xa6\xc6\xc6\x56\x57\xa7\xe6\xa5\xd4\xd6\xda\xe8\x43\x94\xc2\xb5\xc2\xf5\x14\x97\x54\xe6\xa4\x16\x83\x35\x41\xd5\x62\x51\x93\x5c\x94\x59\x50\x82\xa9\xc8\x46\x1f\xe1\x1e\x9b\xa4\xfc\x94\x4a\x2c\xe6\x83\x84\xc1\x1a\x91\xa4\x90\x4d\x80\x68\xb3\xd1\x07\x7b\x12\x10\x00\x00\xff\xff\xd6\xc2\xdf\x26\xfb\x00\x00\x00")

func templatesLayoutTplTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutTplTpl,
		"templates/layout.tpl.tpl",
	)
}

func templatesLayoutTplTpl() (*asset, error) {
	bytes, err := templatesLayoutTplTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.tpl.tpl", size: 251, mode: os.FileMode(420), modTime: time.Unix(1530470276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x66, 0xb7, 0xff, 0xed, 0xfe, 0xac, 0x1e, 0x7f, 0xdc, 0xb9, 0xe0, 0xea, 0x59, 0xaf, 0xd3, 0xf2, 0x4a, 0x4, 0xc2, 0x4f, 0x1f, 0x17, 0xaa, 0xcf, 0x3e, 0x90, 0xd, 0xa, 0x55, 0x13, 0xe0, 0x26}}
	return a, nil
}

var _templatesMainGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4f\x6f\xdb\x30\x0c\xc5\xef\xfa\x14\x9c\x0f\x83\x1c\x18\xd6\xbd\x40\x2f\x5d\xda\xae\xc0\xb6\x02\x99\xb1\x1d\x07\x45\x61\x12\xae\xb2\xa4\xd2\xf4\xd2\x2e\xf0\x77\x1f\xfc\xa7\x5e\x0b\xa4\x87\xf8\x64\x53\x8f\xfc\x99\x4f\x2f\x59\xf7\x60\x77\x08\xb5\xa5\xa0\x14\xd5\x29\xb2\x80\x56\x00\x00\x59\x40\x31\x7b\x91\x94\x8d\x9f\x3e\xee\x32\x35\xbe\xee\x48\xf6\xed\xba\x74\xb1\x36\xb5\x73\xd1\xfb\xdf\x6c\xac\x88\x75\x7b\xcc\x54\xae\x94\x3c\x27\x84\xe3\xb1\xfc\x66\x6b\xec\x3a\x68\x84\x5b\x27\x70\x1c\x9a\x27\x5d\x79\x65\x1b\xfc\x14\x83\xe0\x93\x80\x31\xc0\xf8\xd8\x12\xe3\x66\x24\x18\x03\x1b\xdc\xda\xd6\x0b\x38\x9b\xec\x9a\x3c\xc9\x33\x50\x9d\x3c\xd6\x18\xc4\x0a\xc5\xd0\xbc\x19\xb7\x1c\xe5\x37\xe4\xf1\x3b\xf2\x1f\xe4\x53\xa7\x3f\x08\x0f\x27\xdb\x96\x57\xa7\xaa\x55\x7c\xc0\x00\xaa\x53\x6a\xdb\x06\x07\xda\xc1\x62\x5e\x2a\x87\xbb\x40\xa2\x0f\xd0\x3b\x54\xae\xb0\x49\x31\x34\xf8\x93\x49\x90\x0b\x60\x58\x4c\xf5\xc7\x16\x1b\xc9\xa7\xdd\xcd\x02\xaa\xfb\xe5\xfd\x05\x50\x20\x21\xeb\xe9\x2f\x82\x9b\x3c\x58\x98\x1e\x64\x0c\xdc\x5e\x57\x60\x4e\x12\x6f\xaf\xab\x5f\x67\x12\x5d\xd9\x37\xdd\x85\x0d\x3e\xe9\x43\x01\x9c\xbf\x86\x50\x5f\x7e\x97\x34\x35\x9d\x85\x7b\x31\x70\x85\x61\x83\xfc\xb9\xfa\xfa\x45\xbb\x02\xb2\x01\x94\x15\x70\x28\x20\x90\xcf\x67\x47\xfb\xd4\xe9\xd9\x1c\x03\xeb\x18\xa5\x11\xb6\x09\x6c\x4a\x9e\xdc\x70\xcf\xb0\x8d\x3c\xbb\xf4\x36\x59\x23\x33\xa5\x02\x90\x19\x2e\x2e\xff\x87\xeb\x65\x90\xfe\x38\x8b\x8f\x5d\x3e\xe8\x69\x3b\xa8\x3f\x5c\xf6\xff\x32\xb1\xfb\xc7\xc7\x5d\x79\x63\xc5\x7a\x1f\x34\x32\x8f\xe2\x6e\xcc\xe3\xeb\x33\x9b\x52\xb9\x6a\x83\xce\xfb\x3d\xfe\x05\x00\x00\xff\xff\x60\x5a\x60\x07\x40\x03\x00\x00")

func templatesMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainGoTpl,
		"templates/main.go.tpl",
	)
}

func templatesMainGoTpl() (*asset, error) {
	bytes, err := templatesMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.go.tpl", size: 832, mode: os.FileMode(420), modTime: time.Unix(1530472553, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x9a, 0xda, 0x1b, 0x32, 0xd2, 0x78, 0x7a, 0xd, 0x2c, 0xf0, 0xda, 0xf5, 0x11, 0x4b, 0x19, 0xbb, 0x55, 0x24, 0xac, 0x86, 0x69, 0x5a, 0xf4, 0x83, 0x40, 0xda, 0x99, 0x2b, 0x22, 0x93, 0x9f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.at-conf.json.tpl": templatesAtConfJsonTpl,

	"templates/index.tpl.tpl": templatesIndexTplTpl,

	"templates/layout.tpl.tpl": templatesLayoutTplTpl,

	"templates/main.go.tpl": templatesMainGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".at-conf.json.tpl": &bintree{templatesAtConfJsonTpl, map[string]*bintree{}},
		"index.tpl.tpl":     &bintree{templatesIndexTplTpl, map[string]*bintree{}},
		"layout.tpl.tpl":    &bintree{templatesLayoutTplTpl, map[string]*bintree{}},
		"main.go.tpl":       &bintree{templatesMainGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
